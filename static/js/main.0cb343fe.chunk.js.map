{"version":3,"sources":["Assets/OQN.pdf","Components/Nav.js","Assets/one-quiet-night-logo.jpg","Assets/areum-jo.jpg","Assets/jae-cho.jpg","Components/About.js","Assets/notFound404.svg","Components/PageNotFound.js","Data/Country/JHU_IncidentCases_Country.csv","Components/CustomChartTooltip.js","Data/State/JHU_IncidentCases_State.csv","Components/National.js","Components/StatesChart.js","Data/locations_information.csv","Components/StateSelection.js","Components/States.js","Data/County/JHU_IncidentCases_County.csv","Components/CountyChart.js","Components/CountySelection.js","Components/Counties.js","Components/Forecast.js","Components/Model.js","App.js","reportWebVitals.js","index.js"],"names":["Nav","clickHandler","name","nav","ReactGA","event","category","action","className","to","style","color","onClick","paddingRight","textDecoration","href","pdf","target","rel","About","paddingTop","fontSize","justifyContent","maxWidth","margin","src","logo","alt","textAlign","marginTop","areum","size","jae","NotFoundPage","PageNotFound","CustomChartTooltip","active","payload","label","Math","round","value","offsets","DC","latestDate","config","dataEndDate","National","useState","nationalData","setNationlData","nationalCase","setNationalCase","stateData","setStateData","setAllStatesData","setOneStateDate","dataWashingtonStateEndValue","setError","useEffect","isSubscribed","csv","csvNation","then","nat","latest","filter","a","dates","map","csvState","state","st","length","converted","Object","keys","key","cases","catch","error","toString","colorScale","scaleQuantile","domain","d","range","fontWeight","marginBottom","projection","projectionConfig","scale","width","height","geography","geographies","geo","cur","find","s","id","fill","stroke","hover","strokeWidth","rsmKey","centroid","geoCentroid","allStates","val","indexOf","coordinates","y","textAnchor","subject","dx","dy","x","alignmentBaseline","top","right","bottom","left","strokeDasharray","vertical","dataKey","axisLine","tickLine","position","offset","x1","forecastStartDate","x2","forecastEndDate","y1","strokeOpacity","type","data","dot","content","StatesChart","props","onStateId","allStatesData","yMax","plotData","date","yDomain","ceil","customStyles","control","base","container","provided","valueContainer","StateSelection","setOnStateId","oneStateData","setStateCase","setYMax","stateLocation","setStateLocation","csvLocation","tempLoc","fips","display","alignItems","cursor","defaultValue","options","styles","onChange","States","stateCase","tooltip","setTooltip","stateInfo","data-tip","onMouseEnter","properties","onMouseLeave","backgroundColor","textColor","CountyChart","onCountyId","allCountiesData","CountySelection","setOnCountyId","oneCountyData","setCountyCase","countyLocation","setCountyLocation","countyList","setCountyList","setDisplayCounty","tempState","tempCounty","firstCounty","e","newCountyList","Counties","countyData","setCountyData","setAllCountiesData","setoneCountyData","dataKingCountyEndValue","countyCase","csvCounty","county","co","loc","countyName","Forecast","isNational","setIsNationl","isState","setIsState","isCounty","setIsCounty","boxShadow","borderRadius","padding","Model","App","initialize","pageview","window","location","pathname","search","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"gZAAe,G,OAAA,IAA0B,iC,QC4B1BA,EAtBH,WAER,IAAMC,EAAe,SAACC,EAAMC,GACxBC,IAAQC,MAAM,CACVC,SAAUJ,EACVK,OAAO,GAAD,OAAKJ,EAAL,gBAId,OACI,yBAAQK,UAAU,aAAlB,UACI,cAAC,IAAD,CAAMC,GAAG,OAAT,SAAgB,oBAAIC,MAAO,CAACC,MAAO,SAAnB,+BAChB,sBAAKH,UAAU,YAAf,UACI,cAAC,IAAD,CAAMC,GAAG,YAAT,SAAqB,mBAAGG,QAAS,kBAAMX,EAAa,YAAa,aAA5C,wBACrB,cAAC,IAAD,CAAMQ,GAAG,SAAT,SAAkB,mBAAGG,QAAS,kBAAMX,EAAa,SAAU,UAAzC,qBAClB,mBAAGS,MAAO,CAACG,aAAc,EAAGC,eAAgB,aAAcC,KAAMC,EAAKC,OAAO,SAASC,IAAI,aAAaN,QAAS,kBAAMX,EAAa,SAAU,2BAA5I,SAAuK,mDCrBxK,MAA0B,iDCA1B,MAA0B,qCCA1B,MAA0B,oC,QC+C1BkB,EAxCD,WACV,OACI,sBAAKX,UAAU,YAAYE,MAAO,CAAEU,WAAY,QAAhD,UACI,mBAAGZ,UAAU,eAAeE,MAAO,CAAEW,SAAU,QAA/C,2BACA,mBAAGb,UAAU,eAAb,SAA4B,qDAC5B,sBAAKA,UAAU,cAAcE,MAAO,CAAEY,eAAgB,SAAUC,SAAU,QAASC,OAAQ,aAA3F,UACI,gCACI,qBAAKhB,UAAU,WAAWiB,IAAKC,EAAMC,IAAI,uCACzC,oBAAGjB,MAAO,CAAEW,SAAU,QAAtB,+CAAkE,mBAAGX,MAAO,CAAEC,MAAO,UAAWG,eAAgB,aAAeG,OAAO,SAASC,IAAI,aAAaH,KAAK,sDAAnG,4BAEtE,qBAAKP,UAAU,cAAcE,MAAO,CAAEc,OAAQ,gBAAiBI,UAAW,QAA1E,SACI,8BAAG,mDAAH,+JAA2L,mBAAGb,KAAK,8CAA8CE,OAAO,SAASC,IAAI,aAAaV,UAAU,aAAjG,sCAA3L,8IAIR,sBAAKA,UAAU,QAAQE,MAAO,CAACmB,UAAW,QAA1C,UACI,gCACI,oBAAGrB,UAAU,eAAb,4BAA2C,uBAA3C,IAAiD,sBAAMA,UAAU,gBAAhB,4CACjD,qBAAKiB,IAAKK,EAAOtB,UAAU,UAAUmB,IAAI,kBACzC,mBAAGnB,UAAU,cAAcE,MAAO,CAACa,SAAU,SAA7C,qcACA,sBAAKf,UAAU,QAAf,UACI,oBAAGO,KAAK,6BAA6BE,OAAO,SAASC,IAAI,aAAzD,UAAsE,cAAC,IAAD,CAAUa,KAAM,GAAIpB,MAAM,YAAhG,OACA,mBAAGI,KAAK,wCAAwCE,OAAO,SAASC,IAAI,aAApE,SAAiF,cAAC,IAAD,CAAYa,KAAM,GAAIpB,MAAM,cAC7G,mBAAGI,KAAK,sBAAsBE,OAAO,SAASC,IAAI,aAAlD,SAA+D,cAAC,IAAD,CAAUa,KAAM,GAAIpB,MAAM,oBAGjG,gCACI,oBAAGH,UAAU,eAAb,2BAA0C,uBAA1C,IAAgD,sBAAMA,UAAU,gBAAhB,+BAChD,qBAAKiB,IAAKO,EAAKxB,UAAU,UAAUmB,IAAI,gBACvC,mBAAGnB,UAAU,cAAcE,MAAO,CAACa,SAAU,SAA7C,6fACA,sBAAKf,UAAU,QAAf,UACI,mBAAGO,KAAK,0BAA0BE,OAAO,SAASC,IAAI,aAAtD,SAAmE,cAAC,IAAD,CAAUa,KAAM,GAAIpB,MAAM,cAC7F,mBAAGI,KAAK,yCAAyCE,OAAO,SAASC,IAAI,aAArE,SAAkF,cAAC,IAAD,CAAYa,KAAM,GAAIpB,MAAM,2BCvCvH,MAA0B,wCCiB1BsB,EAbM,WACjB,OACI,sBAAKzB,UAAU,YAAf,UACI,+CACA,qBAAKiB,IAAKS,EAAcP,IAAI,iBAAgBjB,MAAO,CAAEa,SAAU,QAASC,OAAQ,YAChF,4EACA,iCACE,cAAC,IAAD,CAAMf,GAAG,IAAIC,MAAO,CAACC,MAAO,SAA5B,+B,iCCXC,MAA0B,sDCe1BwB,EAbY,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MAC3C,OAAIF,EAEI,sBAAK5B,UAAU,iBAAf,UACI,oBAAGA,UAAU,gBAAb,gBAAiC8B,KACjC,mBAAG9B,UAAU,gBAAgBE,MAAO,CAACW,SAAU,OAAQV,MAAO,WAA9D,mBAA8E4B,KAAKC,MAAMH,EAAQ,GAAGI,UACpG,mBAAGjC,UAAU,gBAAb,mCAIL,MCZI,MAA0B,oD,gCCiBnCkC,EAAU,CACZC,GAAI,CAAC,GAAI,KAEPC,EAAaC,EAAOC,YAiIXC,EA/HE,WAAO,IAAD,EAEoBC,mBAAS,IAF7B,mBAEZC,EAFY,KAEEC,EAFF,OAGqBF,mBAAS,IAH9B,mBAGZG,EAHY,KAGEC,EAHF,OAMeJ,mBAAS,IANxB,mBAMZK,EANY,KAMDC,EANC,OAOuBN,mBAAS,IAPhC,mBAOGO,GAPH,aAQqBP,mBAAS,IAR9B,mBAQEQ,GARF,aASeR,mBAASH,EAAOY,6BAT/B,gCAUOT,mBAAS,KAVhB,mBAULU,GAVK,WAYnBC,qBAAU,WACN,IAAIC,GAAe,EAgBnB,OAfAC,YAAIC,GAAWC,MAAK,SAAAC,GAChBd,EAAec,GACf,IAAIC,EAASD,EAAIE,QAAO,SAAAC,GAAC,OAAIA,EAAEC,QAAUxB,KACzCQ,EAAgBa,EAAOI,KAAI,SAAAF,GAAC,OAAIA,EAAC,UAErCN,YAAIS,GAAUP,MAAK,SAAAQ,GACf,GAAIX,EAAc,CACd,IAAIY,EAAKD,EAAMA,EAAME,OAAO,GACxBC,EAAYC,OAAOC,KAAKJ,GAAIH,KAAI,SAAAQ,GAAG,MAAK,CAAEA,MAAKC,MAAON,EAAGK,OAC7DvB,EAAaoB,GACbnB,EAAiBgB,GACjBf,EAAgBgB,OAGvBO,OAAM,SAAAC,GAAK,OAAKpB,EAAeF,EAASsB,EAAMC,YAAc,QACtD,kBAAMrB,GAAe,KAC7B,IAEH,IAAMsB,EAAaC,cACdC,OAAO/B,EAAUgB,KAAI,SAAAgB,GAAC,OAAIA,EAAEP,UAC5BQ,MAAM,CACH,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGR,OACI,gCACI,oBAAG5E,MAAO,CAACW,SAAU,OAAQkE,WAAY,MAAOC,aAAc,QAA9D,oBAA8E,wCAA9E,2BAAuH,+BAAO5C,IAA9H,IAAiJ,uBAAjJ,eAAkK,+BAAOL,KAAKC,MAAMW,KAApL,qDACA,sBAAK3C,UAAU,cAAf,UACI,qBAAKA,UAAU,iBAAf,SACI,cAAC,gBAAD,CAAeiF,WAAW,eAC1BC,iBAAkB,CAAEC,MAAO,KAC3BC,MAAO,IACPlF,MAAO,CAAEkF,MAAO,OAAQC,OAAQ,QAHhC,SAII,cAAC,cAAD,CAAaC,UA9DtB,0DA8DS,SACK,gBAAGC,EAAH,EAAGA,YAAH,OACD,qCACMA,EAAY1B,KAAI,SAAA2B,GACd,IAAMC,EAAM5C,EAAU6C,MAAK,SAAAC,GAAC,OAAIA,EAAEtB,MAAQmB,EAAII,MAC9C,OACI,cAAC,YAAD,CAEAN,UAAWE,EACXK,KAAMJ,EAAMf,EAAWe,EAAInB,OAAS,OACpCwB,OAAO,OACP5F,MAAO,CACH6F,MAAO,CACHD,OAAQ,UACRE,YAAa,KAPhBR,EAAIS,WAahBV,EAAY1B,KAAI,SAAA2B,GACjB,IAAMU,EAAWC,YAAYX,GACvBC,EAAMW,EAAUV,MAAK,SAAAC,GAAC,OAAIA,EAAEU,MAAQb,EAAII,MAC9C,OACI,4BACCH,GACGS,EAAS,IAAM,KACfA,EAAS,IAAM,MAC4B,IAA1C/B,OAAOC,KAAKlC,GAASoE,QAAQb,EAAIG,IAClC,cAAC,SAAD,CAAQW,YAAaL,EAArB,SACI,sBAAMM,EAAE,IAAI3F,SAAU,GAAI4F,WAAW,SAArC,SAA+ChB,EAAIG,OAGvD,cAAC,aAAD,CAAYc,QAASR,EAAUS,GAAIzE,EAAQuD,EAAIG,IAAI,GAAIgB,GAAI1E,EAAQuD,EAAIG,IAAI,GAA3E,SACI,sBAAMiB,EAAG,EAAGhG,SAAU,GAAIiG,kBAAkB,SAA5C,SAAsDrB,EAAIG,SAV1DJ,EAAIS,OAAS,sBAsB3CxD,GACF,qBAAKzC,UAAU,WAAf,SACI,eAAC,IAAD,CAAWoF,MAAO,IAAKC,OAAQ,IAAKrE,OAAQ,CAAE+F,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,GAApF,UACI,cAAC,IAAD,CAAepB,OAAO,OAAOqB,gBAAgB,MAAMC,UAAU,IAC7D,cAAC,IAAD,CAAOC,QAAQ,QAAQxG,SAAS,KAAKyG,UAAU,EAAOC,UAAU,IAChE,cAAC,IAAD,CAAO1G,SAAS,KAAKyG,UAAU,EAAOC,UAAU,EAAO3C,OAAQ,CAAC,EAAG,OACnE,cAAC,IAAD,CAAeiC,EAAE,aAAaf,OAAO,UAAUqB,gBAAgB,MAAMrF,MAAO,CAAE0F,SAAU,SAAUvF,MAAO,iBAAkBpB,SAAU,KAAMgF,KAAK,UAAW4B,OAAQ,MACnK,cAAC,IAAD,CAAeZ,EAAE,aAAaf,OAAO,UAAUqB,gBAAgB,MAAMrF,MAAO,CAAE0F,SAAU,gBAAkBvF,MAAO,8BAA+B4D,KAAM,UAAWhF,SAAU,QAC3K,cAAC,IAAD,CAAegG,EAAE,aAAaf,OAAO,UAAUqB,gBAAgB,MAAMrF,MAAO,CAAE0F,SAAU,SAAUvF,MAAO,oBAAqB4D,KAAM,UAAW4B,OAAQ,GAAI5G,SAAU,QACrK,cAAC,IAAD,CAAegG,EAAE,aAAaf,OAAO,UAAUqB,gBAAgB,MAAMrF,MAAO,CAAE0F,SAAU,SAAUvF,MAAO,2BAA4B4D,KAAM,UAAW4B,OAAQ,GAAI5G,SAAU,QAC5K,cAAC,IAAD,CAAegG,EAAE,aAAaf,OAAO,UAAUqB,gBAAgB,MAAMrF,MAAO,CAAE0F,SAAU,SAAUvF,MAAO,eAAgB4D,KAAM,UAAW4B,OAAQ,GAAI5G,SAAU,QAChK,cAAC,IAAD,CAAegG,EAAE,aAAaf,OAAO,UAAUqB,gBAAgB,MAAMrF,MAAO,CAAE0F,SAAU,aAAcvF,MAAO,eAAgB4D,KAAM,UAAWhF,SAAU,QACxJ,cAAC,IAAD,CAAegG,EAAE,aAAaf,OAAO,UAAUqB,gBAAgB,MAAMrF,MAAO,CAAE0F,SAAU,SAAUvF,MAAO,mBAAoB4D,KAAM,UAAWhF,SAAU,KAAM4G,OAAQ,MACtK,cAAC,IAAD,CAAeC,GAAIrF,EAAOsF,kBAAmBC,GAAIvF,EAAOwF,gBAAiBC,GAAI,EAAGhC,OAAO,MAAMiC,cAAe,GAAKjG,MAAO,CAAEG,MAAO,iBAAkBpB,SAAU,KAAM2G,SAAU,iBAAkB3B,KAAM,SAAU4B,OAAQ,MACvN,cAAC,IAAD,CAAMO,KAAK,WAAWC,KAAMxF,EAAc4E,QAAQ,KAAKvB,OAAO,UAAUE,YAAa,EAAGkC,KAAK,IAC7F,cAAC,IAAD,CACIC,QAAS,cAAC,EAAD,kB,QCnGlBC,EAlCK,SAAEC,GAAY,IACxBC,EAAmCD,EAAnCC,UAAWC,EAAwBF,EAAxBE,cAAeC,EAASH,EAATG,KAE5BC,EAAWF,EAAc1E,KAAI,SAASgB,GACtC,MAAO,CAAE6D,KAAM7D,EAAEjB,MAAOU,MAAOO,EAAEyD,OAGjCK,EAAuC,IAA7B5G,KAAK6G,KAAW,IAALJ,EAAU,KAEnC,OACI,qBAAKxI,UAAU,WAAf,SACI,eAAC,IAAD,CAAWoF,MAAO,IAAKC,OAAQ,IAAK4C,KAAMQ,EAAUzH,OAAQ,CAAE+F,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,GAApG,UACI,cAAC,IAAD,CAAepB,OAAO,OAAOqB,gBAAgB,MAAMC,UAAU,IAC7D,cAAC,IAAD,CAAOC,QAAQ,OAAOxG,SAAS,KAAKyG,UAAU,EAAOC,UAAU,IAC/D,cAAC,IAAD,CAAO1G,SAAS,KAAKyG,UAAU,EAAOC,UAAU,EAAO3C,OAAQ,CAAC,EAAG+D,KACnE,cAAC,IAAD,CAAe9B,EAAE,aAAaf,OAAO,UAAUqB,gBAAgB,MAAMrF,MAAO,CAAE0F,SAAU,SAAUvF,MAAO,iBAAkBpB,SAAU,KAAMgF,KAAK,UAAW4B,OAAQ,MACnK,cAAC,IAAD,CAAeZ,EAAE,aAAaf,OAAO,UAAUqB,gBAAgB,MAAMrF,MAAO,CAAE0F,SAAU,gBAAkBvF,MAAO,6BAA8B4D,KAAM,UAAWhF,SAAU,QAC1K,cAAC,IAAD,CAAegG,EAAE,aAAaf,OAAO,UAAUqB,gBAAgB,MAAMrF,MAAO,CAAE0F,SAAU,SAAUvF,MAAO,oBAAqB4D,KAAM,UAAW4B,OAAQ,GAAI5G,SAAU,QACrK,cAAC,IAAD,CAAegG,EAAE,aAAaf,OAAO,UAAUqB,gBAAgB,MAAMrF,MAAO,CAAE0F,SAAU,SAAUvF,MAAO,2BAA4B4D,KAAM,UAAW4B,OAAQ,GAAI5G,SAAU,QAC5K,cAAC,IAAD,CAAegG,EAAE,aAAaf,OAAO,UAAUqB,gBAAgB,MAAMrF,MAAO,CAAE0F,SAAU,gBAAiBvF,MAAO,WAAY4D,KAAM,UAAWhF,SAAU,QACvJ,cAAC,IAAD,CAAegG,EAAE,aAAaf,OAAO,UAAUqB,gBAAgB,MAAMrF,MAAO,CAAE0F,SAAU,SAAUvF,MAAO,eAAgB4D,KAAM,UAAW4B,OAAQ,GAAI5G,SAAU,QAChK,cAAC,IAAD,CAAegG,EAAE,aAAaf,OAAO,UAAUqB,gBAAgB,MAAMrF,MAAO,CAAE0F,SAAU,aAAcvF,MAAO,eAAgB4D,KAAM,UAAWhF,SAAU,QACxJ,cAAC,IAAD,CAAegG,EAAE,aAAaf,OAAO,UAAUqB,gBAAgB,MAAMrF,MAAO,CAAE0F,SAAU,SAAUvF,MAAO,mBAAoB4D,KAAM,UAAWhF,SAAU,KAAM4G,OAAQ,MACtK,cAAC,IAAD,CAAeC,GAAIrF,EAAOsF,kBAAmBC,GAAIvF,EAAOwF,gBAAiBC,GAAI,EAAGhC,OAAO,MAAMiC,cAAe,GAAKjG,MAAO,CAAEG,MAAO,iBAAkBpB,SAAU,KAAM2G,SAAU,iBAAkB3B,KAAM,SAAU4B,OAAQ,MACvN,cAAC,IAAD,CAAMO,KAAK,WAAWX,QAAQ,QAAQvB,OAAO,UAAUE,YAAa,EAAGkC,KAAK,IAC5E,cAAC,IAAD,CACIC,QAAS,cAAC,EAAD,Y,gBChCd,MAA0B,kDCMnCU,EAAe,CACjBC,QAAS,SAAAC,GAAI,kCACNA,GADM,IAETlI,SAAU,UAEdmI,UAAW,SAAAC,GAAQ,kCACZA,GADY,IAEf7D,MAAO,IACPvE,SAAU,UAEdqI,eAAgB,SAACD,EAAUlF,GAAX,mBAAC,eACVkF,GADS,IAEZzB,SAAU,SACVrH,MAAO,cAsCAgJ,EAjCQ,SAACd,GAAW,IAEvBe,EAAsDf,EAAtDe,aAAcC,EAAwChB,EAAxCgB,aAAcC,EAA0BjB,EAA1BiB,aAAcC,EAAYlB,EAAZkB,QAFpB,EAGY/G,mBAAS,IAHrB,mBAGvBgH,EAHuB,KAGRC,EAHQ,KAa9B,OATAtG,qBAAU,WACNE,YAAIqG,GAAanG,MAAK,SAAAQ,GAClB,IAAI4F,EAAU5F,EAAML,QAAO,SAAAmB,GAAC,MAAe,UAAXA,EAAEmD,QAAkBnE,KAAI,SAAAgB,GAC/C,MAAO,CAAE5C,MAAO4C,EAAE+E,KAAM9H,MAAO+C,EAAEnF,SAE1C+J,EAAiBE,QAEtB,IAGC,sBAAKzJ,MAAO,CAAEc,OAAQ,YAAaD,SAAU,QAAS8I,QAAS,OAAQ/I,eAAgB,SAAUgJ,WAAY,UAA7G,UACI,mBAAG9J,UAAU,gBAAgBE,MAAO,CAAE6J,OAAQ,WAA9C,iCACA,cAAC,IAAD,CACIC,aAAc,CAAE/H,MAAO,GAAIH,MAAO,cAClCpC,KAAK,SACLuK,QAAST,EACTU,OAAQrB,EACRsB,SAAU,SAAAlI,GACNmH,EAAanH,EAAMA,OAEnBqH,EAAaD,EAAapH,EAAMA,QAChCsH,EAAQxH,KAAKC,MAAMqH,EAAapH,EAAMA,gBChCpDC,EAAU,CACZC,GAAI,CAAC,GAAI,KAGPC,EAAaC,EAAOC,YAwHX8H,EAtHA,WAAO,IAAD,EAEiB5H,mBAAS,IAF1B,mBAEVK,EAFU,KAECC,EAFD,OAGiBN,mBAAS,MAH1B,mBAGV8F,EAHU,KAGCc,EAHD,OAIyB5G,mBAAS,IAJlC,mBAIV+F,EAJU,KAIKxF,EAJL,OAKuBP,mBAAS,IALhC,mBAKV6G,EALU,KAKIrG,EALJ,OAMiBR,mBAASH,EAAOY,6BANjC,mBAMVoH,EANU,KAMCf,EAND,OAOS9G,mBAAS,IAPlB,mBAOHU,GAPG,aAQaV,mBAAS,IARtB,mBAQV8H,EARU,KAQDC,EARC,OASO/H,mBAASH,EAAOY,6BATvB,mBASVuF,EATU,KASJe,EATI,KAWjBpG,qBAAU,WACN,IAAIC,GAAe,EAWnB,OAVAC,YAAIS,GAAUP,MAAK,SAAAQ,GACf,GAAIX,EAAc,CACd,IAAIY,EAAKD,EAAMA,EAAME,OAAO,GACxBC,EAAYC,OAAOC,KAAKJ,GAAIH,KAAI,SAAAQ,GAAG,MAAK,CAAEA,MAAKC,MAAON,EAAGK,OAC7DvB,EAAaoB,GACbnB,EAAiBgB,GACjBf,EAAgBgB,OAGvBO,OAAM,SAAAC,GAAK,OAAKpB,EAAeF,EAASsB,EAAMC,YAAc,QACtD,kBAAMrB,GAAe,KAC7B,IAEH,IAAMoH,EAAYpE,EAAU1C,QAAO,SAAAmB,GAAC,OAAIA,EAAEwB,MAAQiC,KAAWzE,KAAI,SAAAgB,GAAC,OAAIA,EAAEnF,QAElEgF,EAAaC,cACdC,OAAO/B,EAAUgB,KAAI,SAAAgB,GAAC,OAAIA,EAAEP,UAC5BQ,MAAM,CACH,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAKR,OACI,gCACI,oBAAG5E,MAAO,CAACW,SAAU,OAAQkE,WAAY,OAAzC,gBAAoD,+BAAOyF,IAA3D,iCAA0G,+BAAOpI,IAAjH,IAAoI,uBAApI,eAAqJ,+BAAOL,KAAKC,MAAMqI,KAAvK,qDACC/B,GAAa,cAAC,EAAD,CAAgBc,aAAcA,EAAcC,aAAcA,EAAcC,aAAcA,EAAcC,QAASA,IAC3H,sBAAKvJ,UAAU,cAAf,UACQ,sBAAKA,UAAU,iBAAf,UACA,cAAC,gBAAD,CAAeyK,WAAS,GAAGxF,WAAW,eACtCC,iBAAkB,CAAEC,MAAO,KAC3BC,MAAO,IACPlF,MAAO,CAAEkF,MAAO,OAAQC,OAAQ,QAHhC,SAII,cAAC,cAAD,CAAaC,UA9DtB,0DA8DS,SACK,gBAAGC,EAAH,EAAGA,YAAH,OACD,qCACMA,EAAY1B,KAAI,SAAA2B,GACd,IAAMC,EAAM5C,EAAU6C,MAAK,SAAAC,GAAC,OAAIA,EAAEtB,MAAQmB,EAAII,MAC9C,OACI,cAAC,YAAD,CAEAN,UAAWE,EACXK,KAAMJ,EAAMf,EAAWe,EAAInB,OAAS,OACpCwB,OAAO,OACP5F,MAAO,CACH6F,MAAO,CACHD,OAAQ,UACRE,YAAa,IAGrB5F,QAAS,WACLgJ,EAAa3D,EAAIpB,KACjBiF,EAAa7D,EAAInB,OACjBiF,EAAQxH,KAAKC,MAAMyD,EAAInB,SAE3BoG,aAAc,WACVH,EAAW,GAAD,OAAI/E,EAAImF,WAAWjL,KAAnB,aAA4BqC,KAAKC,MAAMyD,EAAInB,UAEzDsG,aAAc,WACVL,EAAW,MAnBV/E,EAAIS,WAwBhBV,EAAY1B,KAAI,SAAA2B,GACjB,IAAMU,EAAWC,YAAYX,GACvBC,EAAMW,EAAUV,MAAK,SAAAC,GAAC,OAAIA,EAAEU,MAAQb,EAAII,MAC9C,OACI,4BACCH,GACGS,EAAS,IAAM,KACfA,EAAS,IAAM,MAC4B,IAA1C/B,OAAOC,KAAKlC,GAASoE,QAAQb,EAAIG,IAClC,cAAC,SAAD,CAAQW,YAAaL,EAArB,SACI,sBAAMM,EAAE,IAAI3F,SAAU,GAAI4F,WAAW,SAArC,SAA+ChB,EAAIG,OAGvD,cAAC,aAAD,CAAYc,QAASR,EAAUS,GAAIzE,EAAQuD,EAAIG,IAAI,GAAIgB,GAAI1E,EAAQuD,EAAIG,IAAI,GAA3E,SACI,sBAAMiB,EAAG,EAAGhG,SAAU,GAAIiG,kBAAkB,SAA5C,SAAsDrB,EAAIG,SAV1DJ,EAAIS,OAAS,oBAoBrC,cAAC,IAAD,CAAc4E,gBAAgB,UAAUC,UAAU,UAAlD,SAA6DR,OAEpE/B,GAAiB,cAAC,EAAD,CAAaC,KAAMA,EAAMF,UAAWA,EAAWC,cAAeA,EAAe8B,UAAWA,WCtIvG,MAA0B,qDCwC1BU,EAlCK,SAAE1C,GAAY,IACxB2C,EAAsC3C,EAAtC2C,WAAYC,EAA0B5C,EAA1B4C,gBAAiBzC,EAASH,EAATG,KAE/BC,EAAWwC,EAAgBpH,KAAI,SAASgB,GACxC,MAAO,CAAE6D,KAAM7D,EAAEjB,MAAOU,MAAOO,EAAEmG,OAGjCrC,EAAuC,IAA7B5G,KAAK6G,KAAW,IAALJ,EAAU,KAEnC,OACI,qBAAKxI,UAAU,WAAf,SACI,eAAC,IAAD,CAAWoF,MAAO,IAAKC,OAAQ,IAAK4C,KAAMQ,EAAUzH,OAAQ,CAAE+F,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,GAApG,UACI,cAAC,IAAD,CAAepB,OAAO,OAAOqB,gBAAgB,MAAMC,UAAU,IAC7D,cAAC,IAAD,CAAOC,QAAQ,OAAOxG,SAAS,KAAKyG,UAAU,EAAOC,UAAU,IAC/D,cAAC,IAAD,CAAO1G,SAAS,KAAKyG,UAAU,EAAOC,UAAU,EAAO3C,OAAQ,CAAC,EAAG+D,KACnE,cAAC,IAAD,CAAe9B,EAAE,aAAaf,OAAO,UAAUqB,gBAAgB,MAAMrF,MAAO,CAAE0F,SAAU,SAAUvF,MAAO,iBAAkBpB,SAAU,KAAMgF,KAAK,UAAW4B,OAAQ,MACnK,cAAC,IAAD,CAAeZ,EAAE,aAAaf,OAAO,UAAUqB,gBAAgB,MAAMrF,MAAO,CAAE0F,SAAU,gBAAkBvF,MAAO,6BAA8B4D,KAAM,UAAWhF,SAAU,QAC1K,cAAC,IAAD,CAAegG,EAAE,aAAaf,OAAO,UAAUqB,gBAAgB,MAAMrF,MAAO,CAAE0F,SAAU,SAAUvF,MAAO,oBAAqB4D,KAAM,UAAW4B,OAAQ,GAAI5G,SAAU,QACrK,cAAC,IAAD,CAAegG,EAAE,aAAaf,OAAO,UAAUqB,gBAAgB,MAAMrF,MAAO,CAAE0F,SAAU,SAAUvF,MAAO,2BAA4B4D,KAAM,UAAW4B,OAAQ,GAAI5G,SAAU,QAC5K,cAAC,IAAD,CAAegG,EAAE,aAAaf,OAAO,UAAUqB,gBAAgB,MAAMrF,MAAO,CAAE0F,SAAU,gBAAiBvF,MAAO,WAAY4D,KAAM,UAAWhF,SAAU,QACvJ,cAAC,IAAD,CAAegG,EAAE,aAAaf,OAAO,UAAUqB,gBAAgB,MAAMrF,MAAO,CAAE0F,SAAU,SAAUvF,MAAO,eAAgB4D,KAAM,UAAW4B,OAAQ,GAAI5G,SAAU,QAChK,cAAC,IAAD,CAAegG,EAAE,aAAaf,OAAO,UAAUqB,gBAAgB,MAAMrF,MAAO,CAAE0F,SAAU,aAAcvF,MAAO,eAAgB4D,KAAM,UAAWhF,SAAU,QACxJ,cAAC,IAAD,CAAegG,EAAE,aAAaf,OAAO,UAAUqB,gBAAgB,MAAMrF,MAAO,CAAE0F,SAAU,SAAUvF,MAAO,mBAAoB4D,KAAM,UAAWhF,SAAU,KAAM4G,OAAQ,MACtK,cAAC,IAAD,CAAeC,GAAIrF,EAAOsF,kBAAmBC,GAAIvF,EAAOwF,gBAAiBC,GAAI,EAAGhC,OAAO,MAAMiC,cAAe,GAAKjG,MAAO,CAAEG,MAAO,iBAAkBpB,SAAU,KAAM2G,SAAU,iBAAkB3B,KAAM,SAAU4B,OAAQ,MACvN,cAAC,IAAD,CAAMO,KAAK,WAAWX,QAAQ,QAAQvB,OAAO,UAAUE,YAAa,EAAGkC,KAAK,IAC5E,cAAC,IAAD,CACIC,QAAS,cAAC,EAAD,Y,SC1BvBU,EAAe,CACjBC,QAAS,SAAAC,GAAI,kCACNA,GADM,IAETlI,SAAU,UAEdmI,UAAW,SAAAC,GAAQ,kCACZA,GADY,IAEf7D,MAAO,IACPvE,SAAU,UAEdqI,eAAgB,SAACD,EAAUlF,GAAX,mBAAC,eACVkF,GADS,IAEZzB,SAAU,SACVrH,MAAO,cA6DA+K,EAzDS,SAAC7C,GAAW,IAExB8C,EAAyD9C,EAAzD8C,cAAeC,EAA0C/C,EAA1C+C,cAAeC,EAA2BhD,EAA3BgD,cAAe9B,EAAYlB,EAAZkB,QAFtB,EAIW/G,mBAAS,IAJpB,mBAIxBgH,EAJwB,KAITC,EAJS,OAKajH,mBAAS,IALtB,mBAKxB8I,EALwB,KAKRC,EALQ,OAMK/I,mBAAS,IANd,mBAMxBgJ,EANwB,KAMZC,EANY,OAOWjJ,mBAAS,IAPpB,mBAOTkJ,GAPS,WAwB/B,OAfAvI,qBAAU,WACRE,YAAIqG,GAAanG,MAAK,SAAAQ,GACpB,IAAI4H,EAAY5H,EAAML,QAAO,SAAAmB,GAAC,MAAe,UAAXA,EAAEmD,QAAkBnE,KAAI,SAAAgB,GACtD,MAAO,CAAE5C,MAAO4C,EAAE+E,KAAM9H,MAAO+C,EAAEnF,SAErC+J,EAAiBkC,GACjB,IAAIC,EAAa7H,EAAML,QAAO,SAAAmB,GAAC,MAAe,WAAXA,EAAEmD,QAAmBnE,KAAI,SAAAgB,GAC1D,MAAO,CAAE5C,MAAO4C,EAAE+E,KAAM9H,MAAO+C,EAAEnF,KAAMqE,MAAOc,EAAEd,UAElDwH,EAAkBK,GAClB,IAAIC,EAAcD,EAAWlI,QAAO,SAAAmB,GAAC,MAAgB,eAAZA,EAAEd,SAC3C0H,EAAcI,QAEf,IAGD,sBAAK3L,MAAO,CAAEc,OAAQ,YAAaD,SAAU,QAAS8I,QAAS,OAAQ/I,eAAgB,SAAUgJ,WAAY,UAA7G,UACE,mBAAG9J,UAAU,gBAAgBE,MAAO,CAAE6J,OAAQ,WAA9C,iCACA,cAAC,IAAD,CACEC,aAAc,CAAE/H,MAAO,GAAIH,MAAO,cAClCpC,KAAK,SACLuK,QAAST,EACTU,OAAQrB,EACRsB,SAAW,SAAA2B,GACP,IAAIC,EAAgB,YAAIT,GAAgB5H,QAAO,SAAAmB,GAAC,OAAIA,EAAEd,QAAU+H,EAAEhK,SAGlE2J,EAAcM,GACdL,EAAiBK,EAAc,OAGrC,mBAAG/L,UAAU,gBAAgBE,MAAO,CAAE6J,OAAQ,WAA9C,sBACA,cAAC,IAAD,CACErK,KAAK,SACLuK,QAASuB,EACTtB,OAAQrB,EAERsB,SAAU,SAAAlI,GACRkJ,EAAclJ,EAAMA,OACpBoJ,EAAcD,EAAcnJ,EAAMA,QAClCsH,EAAQxH,KAAKC,MAAMoJ,EAAcnJ,EAAMA,gBC1D7CG,EAAaC,EAAOC,YAyFX0J,EAvFE,WAAO,IAAD,EAEiBxJ,mBAAS,IAF1B,mBAEZyJ,EAFY,KAEAC,EAFA,OAGiB1J,mBAAS,SAH1B,mBAGZwI,EAHY,KAGAG,EAHA,OAI2B3I,mBAAS,IAJpC,mBAIZyI,EAJY,KAIKkB,EAJL,OAKuB3J,mBAAS,IALhC,mBAKZ4I,EALY,KAKGgB,EALH,OAMiB5J,mBAASH,EAAOgK,wBANjC,mBAMZC,EANY,KAMAjB,EANA,OAOyB7I,mBAAS,IAPlC,mBAOZ8I,EAPY,KAOIC,EAPJ,OAQW/I,mBAAS,IARpB,mBAQZ8H,EARY,KAQHC,EARG,OASK/H,mBAASH,EAAOgK,wBATrB,mBASZ7D,EATY,KASNe,EATM,KAYnBpG,qBAAU,WACNE,YAAIkJ,GAAWhJ,MAAK,SAAAiJ,GAChB,IAAIC,EAAKD,EAAOA,EAAOvI,OAAO,GAC1BC,EAAYC,OAAOC,KAAKqI,GAAI5I,KAAI,SAAAQ,GAAG,MAAK,CAAEA,MAAKC,MAAOmI,EAAGpI,OAC7D6H,EAAchI,GACdiI,EAAmBK,GACnBJ,EAAiBK,QAEtB,IAEHtJ,qBAAU,WACNE,YAAIqG,GAAanG,MAAK,SAAAmJ,GAClBnB,EAAkBmB,EAAIhJ,QAAO,SAAAmB,GAAC,MAAe,WAAXA,EAAEmD,cAEzC,IAEH,IAAI2E,EAAarB,EAAe5H,QAAO,SAAAmB,GAAC,OAAIA,EAAE+E,OAASoB,KAAYnH,KAAI,SAAAgB,GAAC,gBAAOA,EAAEnF,KAAT,sBAA2BmF,EAAEd,UAE/FW,EAAaC,cACdC,OAAOqH,EAAWpI,KAAI,SAAAgB,GAAC,OAAIA,EAAEP,UAC7BQ,MAAM,CACH,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGR,OACI,gCACKkG,GAAc,cAAC,EAAD,CAAiBA,WAAYA,EAAYG,cAAeA,EAAeC,cAAeA,EAAeC,cAAeA,EAAe9B,QAASA,IAE3J,oBAAGrJ,MAAO,CAACW,SAAU,OAAQkE,WAAY,OAAzC,oBAAwD,+BAAO4H,IAA/D,2BAAyG,+BAAOvK,IAAhH,KAAoI,uBAApI,cAAoJ,+BAAOL,KAAKC,MAAMsK,KAAtK,+CACA,sBAAKtM,UAAU,cAAf,UACI,sBAAKA,UAAU,iBAAf,UACI,cAAC,gBAAD,CAAeyK,WAAS,GAAGxF,WAAW,eAAeC,iBAAkB,CAAEC,MAAO,KACxEC,MAAO,IAAKlF,MAAO,CAAEkF,MAAO,OAAQC,OAAQ,QADpD,SAEI,cAAC,cAAD,CAAaC,UAxDtB,4DAwDS,SACK,qBAAGC,YACQ1B,KAAI,SAAA2B,GACZ,IAAMC,EAAMwG,EAAWvG,MAAK,SAAAC,GAAC,OAAIA,EAAEtB,MAAQmB,EAAII,MAC/C,OACA,cAAC,YAAD,CAEIN,UAAWE,EACXK,KAAMJ,EAAMf,EAAWe,EAAInB,OAAS,OACpClE,QAAS,WACL+K,EAAc1F,EAAIpB,KAClBgH,EAAc5F,EAAInB,OAClBiF,EAAQxH,KAAKC,MAAMyD,EAAInB,SAE3BoG,aAAc,WACVH,EAAW,GAAD,OAAI/E,EAAImF,WAAWjL,KAAnB,qBAAoCqC,KAAKC,MAAMyD,EAAInB,UAEjEsG,aAAc,WACVL,EAAW,MAZV/E,EAAIS,gBAoBzB,cAAC,IAAD,CAAc4E,gBAAgB,UAAUC,UAAU,UAAlD,SAA6DR,OAEpEW,GAAmB,cAAC,EAAD,CAAaD,WAAYA,EAAYC,gBAAiBA,EAAiBzC,KAAMA,WCpC9FoE,EApDE,WAAO,IAAD,EAEgBpK,oBAAS,GAFzB,mBAEZqK,EAFY,KAEAC,EAFA,OAGWtK,oBAAS,GAHpB,mBAGZuK,EAHY,KAGHC,EAHG,OAIaxK,oBAAS,GAJtB,mBAIZyK,EAJY,KAIFC,EAJE,KAMbzN,EAAe,SAACC,GAClBE,IAAQC,MAAM,CACVC,SAAUJ,EACVK,OAAQ,+BAIhB,OACI,sBAAKC,UAAU,YAAf,UACI,oBAAGA,UAAU,cAAcE,MAAO,CAACa,SAAU,QAASC,OAAQ,mBAAoBI,UAAW,QAA7F,UAAsG,mDAAtG,oOAAmW,mBAAGb,KAAK,8CAA8CP,UAAU,aAAhE,mCAAnW,6FAEA,oBAAGA,UAAU,cAAcE,MAAO,CAACa,SAAU,QAASC,OAAQ,mBAAoBI,UAAW,QAA7F,sDAA+I,mBAAGpB,UAAU,aAAaO,KAAK,sCAA/B,mCAA/I,OACA,sBAAKP,UAAU,UAAf,UACI,mBAAGA,UAAU,gBAAgBE,MAAO,CAAC6J,OAAQ,WAA7C,+BACA,mBAAG/J,UAAW6M,EAAa,WAAa,gBACpCzM,QAAS,WACT0M,GAAa,GACbE,GAAW,GACXE,GAAY,GACZzN,EAAa,aALjB,sBAMA,mBAAGO,UAAW+M,EAAU,WAAa,gBACjC3M,QAAS,WACT0M,GAAa,GACbE,GAAW,GACXE,GAAY,GACZzN,EAAa,UALjB,oBAMA,mBAAGO,UAAWiN,EAAW,WAAa,gBAClC7M,QAAS,WACT0M,GAAa,GACbE,GAAW,GACXE,GAAY,GACZzN,EAAa,WALjB,yBAOJ,sBAAKS,MAAO,CAACiN,UAAW,0BAA6BC,aAAc,MAAOC,QAAS,eAAnF,UACI,oBAAInN,MAAO,CAAEW,SAAU,OAAQkE,WAAY,OAA3C,mEAEI8H,EAAa,cAAC,EAAD,IAAeE,EAAU,cAAC,EAAD,IAAa,cAAC,EAAD,IAEvD,mBAAG/M,UAAU,cAAb,oFAEJ,oBAAGA,UAAU,cAAcE,MAAO,CAACa,SAAU,QAASF,SAAU,OAAQG,OAAQ,oBAAhF,uCAAgIqB,EAAOC,eACvI,oBAAGtC,UAAU,cAAcE,MAAO,CAACa,SAAU,QAASF,SAAU,OAAQG,OAAQ,oBAAhF,UAAqG,mDAArG,mBAAiJ,mBAAGT,KAAK,8CAA8CP,UAAU,aAAhE,sCAAjJ,gGChCGsN,EAtBD,WACV,OACI,sBAAKtN,UAAU,YAAf,UACI,6DACA,sBAAKE,MAAO,CAAEkB,UAAW,OAAQL,SAAU,QAASC,OAAQ,UAA5D,UACI,oBAAIhB,UAAU,eAAd,0BACA,mBAAGA,UAAU,cAAb,4JACA,mBAAGA,UAAU,cAAb,mKACA,oBAAGA,UAAU,cAAb,UAA2B,mBAAGO,KAAK,8CAA8CP,UAAU,aAAhE,uCAA3B,2TACA,oBAAIA,UAAU,eAAeE,MAAO,CAACmB,UAAW,QAAhD,iCACA,mBAAGrB,UAAU,cAAb,wQACA,oBAAGA,UAAU,cAAb,UAA2B,mBAAGO,KAAK,kFAAkFP,UAAU,aAApG,iDAA3B,ybACA,oBAAIA,UAAU,eAAeE,MAAO,CAACmB,UAAW,QAAhD,4BACA,mBAAGrB,UAAU,cAAb,mXACA,mBAAGA,UAAU,cAAb,+mBACA,mBAAGA,UAAU,cAAb,2ZCsBDuN,MAvBf,WAQE,OANApK,qBAAU,WACRvD,IAAQ4N,WAAW,kBACnB5N,IAAQ6N,SAASC,OAAOC,SAASC,SAAWF,OAAOC,SAASE,UAE3D,IAGD,sBAAK7N,UAAU,MAAf,UACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAO8N,OAAK,EAACC,KAAK,OAAOC,UAAWpB,IACpC,cAAC,IAAD,CAAOmB,KAAK,SAASC,UAAWrN,IAChC,cAAC,IAAD,CAAOoN,KAAK,SAASC,UAAWV,IAChC,cAAC,IAAD,CAAOS,KAAK,YAAYC,UAAWpB,IACnC,cAAC,IAAD,CAAOoB,UAAWtM,WCpBXuM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB5K,MAAK,YAAkD,IAA/C6K,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,K","file":"static/js/main.0cb343fe.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/OQN.631fe207.pdf\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport pdf from '../Assets/OQN.pdf';\n\nimport ReactGA from 'react-ga';\n\nconst Nav = () => {\n\n    const clickHandler = (name, nav) => {\n        ReactGA.event({\n            category: name,\n            action: `${nav} clicked.`\n          });\n    };\n\n    return (\n        <header className=\"App-header\">\n            <Link to=\"/vis\"><h2 style={{color: \"white\"}}>One Quiet Night</h2></Link>\n            <div className=\"nav-right\">\n                <Link to=\"/forecast\"><p onClick={() => clickHandler('/Forecast', 'Forecast')}>Forecast</p></Link>\n                <Link to=\"/about\"><p onClick={() => clickHandler('/About', 'About')}>About</p></Link>\n                <a style={{paddingRight: 0, textDecoration: \"underline\"}} href={pdf} target=\"_blank\" rel=\"noreferrer\" onClick={() => clickHandler('/Model', 'Model - Research paper')}><p>Our Model</p></a>\n            </div>\n        </header>\n\n    );\n}\n\nexport default Nav;","export default __webpack_public_path__ + \"static/media/one-quiet-night-logo.8256d577.jpg\";","export default __webpack_public_path__ + \"static/media/areum-jo.c7558542.jpg\";","export default __webpack_public_path__ + \"static/media/jae-cho.3d22eee1.jpg\";","import React from 'react';\nimport logo from './../Assets/one-quiet-night-logo.jpg';\nimport areum from './../Assets/areum-jo.jpg';\nimport jae from './../Assets/jae-cho.jpg';\n\nimport { FaGithub, FaLinkedin, FaLaptop } from 'react-icons/fa';\n\nconst About = () => {\n    return (\n        <div className=\"container\" style={{ paddingTop: \"30px\"}}>\n            <p className=\"profile-name\" style={{ fontSize: \"30px\"}}>Meet our team</p>\n            <p className=\"profile-name\"><code>One Quiet Night</code></p>\n            <div className=\"vis-wrapper\" style={{ justifyContent: \"center\", maxWidth: \"800px\", margin: \"70px auto\"}}>\n                <div>\n                    <img className=\"logo-img\" src={logo} alt=\"one quiet night logo from pandemic\" />\n                    <p style={{ fontSize: \"12px\" }}>ONE-QUIET-Night special card from <a style={{ color: \"#EE3E23\", textDecoration: \"underline\" }} target=\"_blank\" rel=\"noreferrer\" href=\"https://en.wikipedia.org/wiki/Pandemic_(board_game)\">pandemic</a></p>\n                </div>\n                <div className=\"text-height\" style={{ margin: \"30px 0 0 30px\", textAlign: \"left\"}}>\n                    <p><code>One Quiet Night</code> COVID-19 Forecast uses scientifically-driven machine learning models to accurately predict the spread of COVID-19 infections using real-time data from the <a href=\"https://c3.ai/customers/covid-19-data-lake/\" target=\"_blank\" rel=\"noreferrer\" className=\"c3-ai-link\">C3 AI COVID-19 Data Lake</a>. OneQuietNight forecasts the number of new Covid-19 cases per week for the next 4 weeks at the national, state, and county levels.</p>\n                </div>\n            </div>\n                  \n            <div className=\"about\" style={{marginTop: \"70px\"}}>\n                <div>\n                    <p className=\"profile-name\">Areum Jo, Ph.D.<br/> <span className=\"profile-title\">Data engineer and team lead</span></p>\n                    <img src={areum} className=\"profile\" alt=\"Areum profile\" />\n                    <p className=\"text-height\" style={{maxWidth: \"550px\"}}>Areum creates thoughtful web applications using the newest technologies to help and inspire people. She has worked in a handful of institutes as a neuroscientist to research the brain-imaging methods and the brain-computer interfaces. She is passionate about combining her skills from neuroscience with web UI/UX technologies to solve complex problems at scale. She holds a Ph. D. in neuroscience from SungKyunKwan University, South Korea.</p>\n                    <div className=\"about\">\n                        <a href=\"https://github.com/areumjo\" target=\"_blank\" rel=\"noreferrer\"><FaGithub size={30} color=\"#699FD4\"/> </a>\n                        <a href=\"https://www.linkedin.com/in/areum-jo/\" target=\"_blank\" rel=\"noreferrer\"><FaLinkedin size={30} color=\"#699FD4\"/></a>\n                        <a href=\"https://areumjo.com\" target=\"_blank\" rel=\"noreferrer\"><FaLaptop size={30} color=\"#699FD4\"/></a>\n                    </div>\n                </div>\n                <div>\n                    <p className=\"profile-name\">Jae Cho, Ph.D.<br/> <span className=\"profile-title\">Data scientist</span></p>\n                    <img src={jae} className=\"profile\" alt=\"Jae profile\" />\n                    <p className=\"text-height\" style={{maxWidth: \"550px\"}}>Jae joined Zillow in September 2019 to produce forecasts using mathematical and statistical methods. He builds data-driven models that use economic, demographic, and social data to make predictions about changes in the housing market. The outputs of his models are used to solve business problems inside and outside of Zillow. Prior to Zillow, he has worked in a quantitative hedge fund and in a national lab. He holds a Ph. D. in chemical engineering from Massachusetts Institute of Technology.</p>\n                    <div className=\"about\">\n                        <a href=\"https://github.com/xjhc\" target=\"_blank\" rel=\"noreferrer\"><FaGithub size={30} color=\"#699FD4\"/></a>\n                        <a href=\"https://www.linkedin.com/in/jaehuncho/\" target=\"_blank\" rel=\"noreferrer\"><FaLinkedin size={30} color=\"#699FD4\"/></a>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default About;","export default __webpack_public_path__ + \"static/media/notFound404.4ce18fbb.svg\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PageNotFound from '../Assets/notFound404.svg';\n\nconst NotFoundPage = () => {\n    return (\n        <div className=\"container\">\n            <h1>404 NOT FOUND</h1>\n            <img src={PageNotFound} alt=\"page not found\"style={{ maxWidth: \"500px\", margin: \"50px 0\"}} />\n            <p>The page we were looking for doesn't exist.</p>\n            <button>\n              <Link to=\"/\" style={{color: \"black\"}}>Go to Home </Link>\n            </button>\n        </div>\n    )\n}\n\nexport default NotFoundPage;","export default __webpack_public_path__ + \"static/media/JHU_IncidentCases_Country.f862095f.csv\";","import React from \"react\";\n\nconst CustomChartTooltip = ({ active, payload, label }) => {\n    if (active) {\n        return (\n            <div className=\"custom-tooltip\">\n                <p className=\"tooltip-label\">at {label}</p>\n                <p className=\"tooltip-label\" style={{fontSize: \"18px\", color: \"#EE3E23\"}}>{`${Math.round(payload[0].value)}`}</p>\n                <p className=\"tooltip-label\">{`new cases per 100K`}</p>\n            </div>\n        )\n    }\n    return null;\n}\n\nexport default CustomChartTooltip;","export default __webpack_public_path__ + \"static/media/JHU_IncidentCases_State.889468f6.csv\";","import React, { useState, useEffect } from \"react\";\nimport { ComposableMap, Geographies, Geography, Marker, Annotation } from \"react-simple-maps\"\nimport { geoCentroid } from \"d3-geo\";\n\nimport { csv } from \"d3-fetch\";\nimport csvNation from \"../Data/Country/JHU_IncidentCases_Country.csv\";\nimport CustomChartTooltip from \"./CustomChartTooltip\";\n\nimport csvState from \"../Data/State/JHU_IncidentCases_State.csv\";\nimport { scaleQuantile } from \"d3-scale\";\n\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, ReferenceLine, ReferenceArea } from 'recharts';\nimport allStates from \"../Maps/allstates.json\";\nimport config from \"../config.json\"\n\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\n\nconst offsets = {\n    DC: [30, 25]\n};\nconst latestDate = config.dataEndDate;\n\nconst National = () => {\n\n    const [nationalData, setNationlData] = useState([]);\n    const [nationalCase, setNationalCase] = useState(\"\");\n\n    // state data\n    const [stateData, setStateData] = useState([]); // for mapping\n    const [allStatesData, setAllStatesData] = useState([]);\n    const [oneStateData, setOneStateDate] = useState([]);\n    const [stateCase, setStateCase] = useState(config.dataWashingtonStateEndValue); // for WA cumulative case data\n    const [error, setError] = useState('');\n\n    useEffect(() => {\n        let isSubscribed = true;\n        csv(csvNation).then(nat => {\n            setNationlData(nat);\n            let latest = nat.filter(a => a.dates === latestDate);\n            setNationalCase(latest.map(a => a[\"US\"]));\n        })\n        csv(csvState).then(state => {\n            if (isSubscribed) {\n                let st = state[state.length-5];\n                let converted = Object.keys(st).map(key => ({ key, cases: st[key]}))\n                setStateData(converted);\n                setAllStatesData(state);\n                setOneStateDate(st);\n            }\n        })\n        .catch(error => (isSubscribed ? setError(error.toString()) : null));\n        return () => isSubscribed = false;\n    }, []);\n\n    const colorScale = scaleQuantile()\n        .domain(stateData.map(d => d.cases))\n        .range([\n            \"#ffedea\",\n            \"#ffcec5\",\n            \"#ffad9f\",\n            \"#ff8a75\",\n            \"#ff5533\",\n            \"#e2492d\",\n            \"#be3d26\",\n            \"#9a311f\",\n            \"#782618\"\n    ]);\n\n    return (\n        <div>\n            <p style={{fontSize: \"20px\", fontWeight: \"300\", marginBottom: \"30px\"}}>In the <code>U.S.</code>, on the week ending on <code>{latestDate}</code>,<br/> there were <code>{Math.round(nationalCase)}</code> newly reported COVID-19 cases per 100K people.</p>\n            <div className=\"vis-wrapper\">\n                <div className=\"forecast usmap\" >\n                    <ComposableMap projection=\"geoAlbersUsa\"\n                    projectionConfig={{ scale: 800 }}\n                    width={900}\n                    style={{ width: \"100%\", height: \"auto\" }}>\n                        <Geographies geography={geoUrl}>\n                            {({ geographies }) => (\n                            <>\n                                { geographies.map(geo => {\n                                    const cur = stateData.find(s => s.key === geo.id);\n                                    return (\n                                        <Geography\n                                        key={geo.rsmKey}\n                                        geography={geo}\n                                        fill={cur ? colorScale(cur.cases) : \"#EEE\"}\n                                        stroke=\"#fff\"\n                                        style={{\n                                            hover: {\n                                                stroke: \"#782618\",\n                                                strokeWidth: 2,\n                                            }\n                                        }}\n                                    />\n                                    );\n                                })}\n                                {geographies.map(geo => {\n                                const centroid = geoCentroid(geo);\n                                const cur = allStates.find(s => s.val === geo.id);\n                                return (\n                                    <g key={geo.rsmKey + \"-name\"}>\n                                    {cur &&\n                                        centroid[0] > -160 &&\n                                        centroid[0] < -67 &&\n                                        (Object.keys(offsets).indexOf(cur.id) === -1 ? (\n                                        <Marker coordinates={centroid}>\n                                            <text y=\"3\" fontSize={12} textAnchor=\"middle\">{cur.id}</text>\n                                        </Marker>\n                                        ) : (\n                                        <Annotation subject={centroid} dx={offsets[cur.id][0]} dy={offsets[cur.id][1]}>\n                                            <text x={2} fontSize={12} alignmentBaseline=\"middle\">{cur.id}</text>\n                                        </Annotation>\n                                        ))}\n                                    </g>\n                                );\n                                })}\n                            </>\n                            )}\n                        </Geographies>\n                    </ComposableMap>\n                </div>\n\n            { nationalData &&\n            <div className=\"forecast\">\n                <LineChart width={600} height={400} margin={{ top: 10, right: 40, bottom: 40, left: 5 }}>\n                    <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" vertical={false} />\n                    <XAxis dataKey=\"dates\" fontSize=\"10\" axisLine={false} tickLine={false} />\n                    <YAxis fontSize=\"10\" axisLine={false} tickLine={false} domain={[0, 3000]}/>\n                    <ReferenceLine x=\"2020-01-25\" stroke=\"#EE3E23\" strokeDasharray=\"4 4\" label={{ position: \"bottom\", value: \"1st case in US\", fontSize: \"12\", fill:\"#EE3E23\", offset: 20 }} />\n                    <ReferenceLine x=\"2020-03-14\" stroke=\"#4A72B7\" strokeDasharray=\"4 4\" label={{ position: 'insideTopLeft',  value: 'National emergency declared', fill: '#4A72B7', fontSize: \"12\" }} />\n                    <ReferenceLine x=\"2020-03-28\" stroke=\"#809f3d\" strokeDasharray=\"4 4\" label={{ position: \"bottom\", value: \"CARES act enacted\", fill: \"#809f3d\", offset: 30, fontSize: \"12\" }} />\n                    <ReferenceLine x=\"2020-04-18\" stroke=\"#F48620\" strokeDasharray=\"4 4\" label={{ position: 'bottom', value: \"Stimulus payments starts\", fill: \"#F48620\", offset: 45, fontSize: \"12\" }} />\n                    <ReferenceLine x=\"2020-11-28\" stroke=\"#368243\" strokeDasharray=\"4 4\" label={{ position: \"bottom\", value: \"Thanksgiving\", fill: \"#368243\", offset: 20, fontSize: \"12\" }} />\n                    <ReferenceLine x=\"2020-12-12\" stroke=\"#EE3E23\" strokeDasharray=\"4 4\" label={{ position: \"insideLeft\", value: \"1st vaccine*\", fill: \"#EE3E23\", fontSize: \"12\" }} />\n                    <ReferenceLine x=\"2021-12-04\" stroke=\"#4A72B7\" strokeDasharray=\"4 4\" label={{ position: \"bottom\", value: \"1st Omicron case\", fill: \"#4A72B7\", fontSize: \"12\", offset: 20 }} />\n                    <ReferenceArea x1={config.forecastStartDate} x2={config.forecastEndDate} y1={0} stroke=\"red\" strokeOpacity={0.3} label={{ value: \"4 wks forecast\", fontSize: \"16\", position: \"insideTopRight\", fill: \"323232\", offset: 10 }}/>\n                    <Line type=\"monotone\" data={nationalData} dataKey=\"US\" stroke=\"#043b4e\" strokeWidth={4} dot={false} />\n                    <Tooltip\n                        content={<CustomChartTooltip />}\n                    />\n                </LineChart>\n            </div>\n            }\n            </div>\n        </div>\n    )\n}\n\nexport default National;","import React from \"react\";\n\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, ReferenceLine, ReferenceArea } from 'recharts';\nimport CustomChartTooltip from \"./CustomChartTooltip\";\nimport config from \"../config.json\"\n\nconst StatesChart = ( props ) => {\n    let { onStateId, allStatesData, yMax } = props;\n\n    let plotData = allStatesData.map(function(d) {\n        return { date: d.dates, cases: d[onStateId] };\n    })\n\n    let yDomain = Math.ceil((yMax*1.7)/1000) * 1000;\n    // 02-14-2021 first vaccine\n    return (\n        <div className=\"forecast\">\n            <LineChart width={600} height={400} data={plotData} margin={{ top: 10, right: 40, bottom: 40, left: 5 }}>\n                <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" vertical={false} />\n                <XAxis dataKey=\"date\" fontSize=\"10\" axisLine={false} tickLine={false}  />\n                <YAxis fontSize=\"10\" axisLine={false} tickLine={false} domain={[0, yDomain]} />\n                <ReferenceLine x=\"2020-01-25\" stroke=\"#EE3E23\" strokeDasharray=\"4 4\" label={{ position: \"bottom\", value: \"1st case in US\", fontSize: \"12\", fill:\"#EE3E23\", offset: 20  }} />\n                <ReferenceLine x=\"2020-03-14\" stroke=\"#4A72B7\" strokeDasharray=\"4 4\" label={{ position: 'insideTopLeft',  value: 'National emergency declare', fill: '#4A72B7', fontSize: \"12\" }} />\n                <ReferenceLine x=\"2020-03-28\" stroke=\"#809f3d\" strokeDasharray=\"4 4\" label={{ position: \"bottom\", value: \"CARES act enacted\", fill: \"#809f3d\", offset: 30, fontSize: \"12\" }} />\n                <ReferenceLine x=\"2020-04-18\" stroke=\"#F48620\" strokeDasharray=\"4 4\" label={{ position: 'bottom', value: \"Stimulus payments starts\", fill: \"#F48620\", offset: 45, fontSize: \"12\" }} />\n                <ReferenceLine x=\"2020-11-07\" stroke=\"#4A72B7\" strokeDasharray=\"4 4\" label={{ position: \"insideTopLeft\", value: \"Election\", fill: \"#4A72B7\", fontSize: \"12\" }} />\n                <ReferenceLine x=\"2020-11-28\" stroke=\"#368243\" strokeDasharray=\"4 4\" label={{ position: \"bottom\", value: \"Thanksgiving\", fill: \"#368243\", offset: 20, fontSize: \"12\" }} />\n                <ReferenceLine x=\"2020-12-12\" stroke=\"#EE3E23\" strokeDasharray=\"4 4\" label={{ position: \"insideLeft\", value: \"1st vaccine*\", fill: \"#EE3E23\", fontSize: \"12\" }} />\n                <ReferenceLine x=\"2021-12-04\" stroke=\"#4A72B7\" strokeDasharray=\"4 4\" label={{ position: \"bottom\", value: \"1st Omicron case\", fill: \"#4A72B7\", fontSize: \"12\", offset: 20 }} />\n                <ReferenceArea x1={config.forecastStartDate} x2={config.forecastEndDate} y1={0} stroke=\"red\" strokeOpacity={0.3} label={{ value: \"4 wks forecast\", fontSize: \"16\", position: \"insideTopRight\", fill: \"323232\", offset: 10 }}/>\n                <Line type=\"monotone\" dataKey=\"cases\" stroke=\"#043b4e\" strokeWidth={4} dot={false} />\n                <Tooltip\n                    content={<CustomChartTooltip />}\n                />\n            </LineChart>\n        </div>\n\n    )\n}\n\nexport default StatesChart;","export default __webpack_public_path__ + \"static/media/locations_information.d1756be8.csv\";","import React, { useState, useEffect }  from \"react\";\nimport Select from 'react-select';\n\nimport { csv } from 'd3-fetch';\nimport csvLocation from '../Data/locations_information.csv';\n\nconst customStyles = {\n    control: base => ({\n        ...base,\n        fontSize: '12px',\n    }),\n    container: provided => ({\n        ...provided,\n        width: 150,\n        fontSize: '12px'\n    }),\n    valueContainer: (provided, state) => ({\n        ...provided,\n        position: 'static',\n        color: '#1a1a1a'\n      }),\n\n};\n  \nconst StateSelection = (props) => {\n\n    const { setOnStateId, oneStateData, setStateCase, setYMax } = props;\n    const [stateLocation, setStateLocation] = useState([]);\n    useEffect(() => {\n        csv(csvLocation).then(state => {\n            let tempLoc = state.filter(d => d.type === \"state\").map(d =>  {\n                     return { value: d.fips, label: d.name };\n                });\n            setStateLocation(tempLoc);\n        })\n    }, []);\n\n    return (\n        <div style={{ margin: \"20px auto\", maxWidth: \"500px\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\n            <p className=\"option-button\" style={{ cursor: \"default\"}}>Choose your state: </p>\n            <Select \n                defaultValue={{ value: 53, label: \"Washington\" }}\n                name=\"states\"\n                options={stateLocation}\n                styles={customStyles}\n                onChange={value => {\n                    setOnStateId(value.value);\n                    // console.log(oneStateData[value.value]);\n                    setStateCase(oneStateData[value.value])\n                    setYMax(Math.round(oneStateData[value.value]));\n                }}\n                />\n        </div>\n    )\n\n}\n\nexport default StateSelection;","import React, { useState, useEffect } from \"react\";\nimport { ComposableMap, Geographies, Geography, Marker, Annotation } from \"react-simple-maps\"\nimport { geoCentroid } from \"d3-geo\";\nimport ReactTooltip from \"react-tooltip\";\n\nimport { csv } from \"d3-fetch\";\nimport csvState from \"../Data/State/JHU_IncidentCases_State.csv\";\n// I updated the JHU_CumulativeCases by adding last row from the OQN_CumulativeCasesForecast!!\nimport allStates from \"../Maps/allstates.json\";\n\nimport { scaleQuantile } from \"d3-scale\";\nimport StatesChart from \"./StatesChart\";\nimport StateSelection from \"./StateSelection\";\nimport config from \"../config.json\"\n\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\n\nconst offsets = {\n    DC: [30, 25]\n};\n\nconst latestDate = config.dataEndDate;\n\nconst States = () => {\n\n    const [stateData, setStateData] = useState([]); // for mapping\n    const [onStateId, setOnStateId] = useState(\"53\"); // for initializing WA data\n    const [allStatesData, setAllStatesData] = useState([]);\n    const [oneStateData, setOneStateDate] = useState([]);\n    const [stateCase, setStateCase] = useState(config.dataWashingtonStateEndValue); // for WA cumulative case data\n    const [error, setError] = useState('');\n    const [tooltip, setTooltip] = useState('');\n    const [yMax, setYMax] = useState(config.dataWashingtonStateEndValue);\n\n    useEffect(() => {\n        let isSubscribed = true;\n        csv(csvState).then(state => {\n            if (isSubscribed) {\n                let st = state[state.length-5];\n                let converted = Object.keys(st).map(key => ({ key, cases: st[key]}))\n                setStateData(converted);\n                setAllStatesData(state);\n                setOneStateDate(st);\n            }\n        })\n        .catch(error => (isSubscribed ? setError(error.toString()) : null));\n        return () => isSubscribed = false;\n    }, []);\n\n    const stateInfo = allStates.filter(d => d.val === onStateId).map(d => d.name);\n\n    const colorScale = scaleQuantile()\n        .domain(stateData.map(d => d.cases))\n        .range([\n            \"#ffedea\",\n            \"#ffcec5\",\n            \"#ffad9f\",\n            \"#ff8a75\",\n            \"#ff5533\",\n            \"#e2492d\",\n            \"#be3d26\",\n            \"#9a311f\",\n            \"#782618\"\n    ]);\n\n    // for mapping the current cases : fetch only the last element from the csv data and map\n    // for chart : filter out with the state fips id and plot\n    return (\n        <div>\n            <p style={{fontSize: \"20px\", fontWeight: \"300\"}}>In <code>{stateInfo}</code> state, on the week ending on <code>{latestDate}</code>,<br/> there were <code>{Math.round(stateCase)}</code> newly reported COVID-19 cases per 100K people.</p>\n            {onStateId && <StateSelection setOnStateId={setOnStateId} oneStateData={oneStateData} setStateCase={setStateCase} setYMax={setYMax}/>}\n            <div className=\"vis-wrapper\">\n                    <div className=\"forecast usmap\" >\n                    <ComposableMap data-tip=\"\" projection=\"geoAlbersUsa\"\n                    projectionConfig={{ scale: 800 }}\n                    width={900}\n                    style={{ width: \"100%\", height: \"auto\" }}>\n                        <Geographies geography={geoUrl}>\n                            {({ geographies }) => (\n                            <>\n                                { geographies.map(geo => {\n                                    const cur = stateData.find(s => s.key === geo.id);\n                                    return (\n                                        <Geography\n                                        key={geo.rsmKey}\n                                        geography={geo}\n                                        fill={cur ? colorScale(cur.cases) : \"#EEE\"}\n                                        stroke=\"#fff\"\n                                        style={{\n                                            hover: {\n                                                stroke: \"#782618\",\n                                                strokeWidth: 2,\n                                            }\n                                        }}\n                                        onClick={() => {\n                                            setOnStateId(cur.key);\n                                            setStateCase(cur.cases);\n                                            setYMax(Math.round(cur.cases));\n                                        }}\n                                        onMouseEnter={() => {\n                                            setTooltip(`${geo.properties.name}: ${Math.round(cur.cases)}`);\n                                        }}\n                                        onMouseLeave={() => {\n                                            setTooltip(\"\");\n                                        }}\n                                    />\n                                    );\n                                })}\n                                {geographies.map(geo => {\n                                const centroid = geoCentroid(geo);\n                                const cur = allStates.find(s => s.val === geo.id);\n                                return (\n                                    <g key={geo.rsmKey + \"-name\"}>\n                                    {cur &&\n                                        centroid[0] > -160 &&\n                                        centroid[0] < -67 &&\n                                        (Object.keys(offsets).indexOf(cur.id) === -1 ? (\n                                        <Marker coordinates={centroid}>\n                                            <text y=\"3\" fontSize={12} textAnchor=\"middle\">{cur.id}</text>\n                                        </Marker>\n                                        ) : (\n                                        <Annotation subject={centroid} dx={offsets[cur.id][0]} dy={offsets[cur.id][1]}>\n                                            <text x={2} fontSize={12} alignmentBaseline=\"middle\">{cur.id}</text>\n                                        </Annotation>\n                                        ))}\n                                    </g>\n                                );\n                                })}\n                            </>\n                            )}\n                        </Geographies>\n                    </ComposableMap>\n                    <ReactTooltip backgroundColor=\"#b3b3b3\" textColor=\"#1a1a1a\">{tooltip}</ReactTooltip>\n                </div>\n            {allStatesData && <StatesChart yMax={yMax} onStateId={onStateId} allStatesData={allStatesData} stateCase={stateCase} /> }\n            </div>\n            </div>\n\n    )\n}\n\nexport default States;","export default __webpack_public_path__ + \"static/media/JHU_IncidentCases_County.65e791d6.csv\";","import React from \"react\";\n\nimport CustomChartTooltip from \"./CustomChartTooltip\";\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, ReferenceLine, ReferenceArea } from 'recharts';\nimport config from \"../config.json\"\n\nconst CountyChart = ( props ) => {\n    let { onCountyId, allCountiesData, yMax } = props;\n\n    let plotData = allCountiesData.map(function(d) {\n        return { date: d.dates, cases: d[onCountyId] };\n    })\n\n    let yDomain = Math.ceil((yMax*1.2)/1000) * 1000;\n\n    return (\n        <div className=\"forecast\">\n            <LineChart width={600} height={400} data={plotData} margin={{ top: 10, right: 40, bottom: 40, left: 5 }}>\n                <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" vertical={false} />\n                <XAxis dataKey=\"date\" fontSize=\"10\" axisLine={false} tickLine={false}  />\n                <YAxis fontSize=\"10\" axisLine={false} tickLine={false} domain={[0, yDomain]}/>\n                <ReferenceLine x=\"2020-01-25\" stroke=\"#EE3E23\" strokeDasharray=\"4 4\" label={{ position: \"bottom\", value: \"1st case in US\", fontSize: \"12\", fill:\"#EE3E23\", offset: 20  }} />\n                <ReferenceLine x=\"2020-03-14\" stroke=\"#4A72B7\" strokeDasharray=\"4 4\" label={{ position: 'insideTopLeft',  value: 'National emergency declare', fill: '#4A72B7', fontSize: \"12\" }} />\n                <ReferenceLine x=\"2020-03-28\" stroke=\"#809f3d\" strokeDasharray=\"4 4\" label={{ position: \"bottom\", value: \"CARES act enacted\", fill: \"#809f3d\", offset: 30, fontSize: \"12\" }} />\n                <ReferenceLine x=\"2020-04-18\" stroke=\"#F48620\" strokeDasharray=\"4 4\" label={{ position: 'bottom', value: \"Stimulus payments starts\", fill: \"#F48620\", offset: 45, fontSize: \"12\" }} />\n                <ReferenceLine x=\"2020-11-07\" stroke=\"#4A72B7\" strokeDasharray=\"4 4\" label={{ position: \"insideTopLeft\", value: \"Election\", fill: \"#4A72B7\", fontSize: \"12\" }} />\n                <ReferenceLine x=\"2020-11-28\" stroke=\"#368243\" strokeDasharray=\"4 4\" label={{ position: \"bottom\", value: \"Thanksgiving\", fill: \"#368243\", offset: 20, fontSize: \"12\" }} />\n                <ReferenceLine x=\"2020-12-12\" stroke=\"#EE3E23\" strokeDasharray=\"4 4\" label={{ position: \"insideLeft\", value: \"1st vaccine*\", fill: \"#EE3E23\", fontSize: \"12\" }} />\n                <ReferenceLine x=\"2021-12-04\" stroke=\"#4A72B7\" strokeDasharray=\"4 4\" label={{ position: \"bottom\", value: \"1st Omicron case\", fill: \"#4A72B7\", fontSize: \"12\", offset: 20 }} />\n                <ReferenceArea x1={config.forecastStartDate} x2={config.forecastEndDate} y1={0} stroke=\"red\" strokeOpacity={0.3} label={{ value: \"4 wks forecast\", fontSize: \"16\", position: \"insideTopRight\", fill: \"323232\", offset: 10 }}/>\n                <Line type=\"monotone\" dataKey=\"cases\" stroke=\"#043b4e\" strokeWidth={4} dot={false} />\n                <Tooltip\n                    content={<CustomChartTooltip />}\n                />\n            </LineChart>\n        </div>\n\n    )\n}\n\nexport default CountyChart;","import React, { useState, useEffect }  from \"react\";\nimport Select from 'react-select';\n\nimport { csv } from 'd3-fetch';\nimport csvLocation from '../Data/locations_information.csv';\n\nconst customStyles = {\n    control: base => ({\n        ...base,\n        fontSize: '12px',\n    }),\n    container: provided => ({\n        ...provided,\n        width: 150,\n        fontSize: '12px'\n    }),\n    valueContainer: (provided, state) => ({\n        ...provided,\n        position: 'static',\n        color: '#1a1a1a'\n      }),\n};\n\nconst CountySelection = (props) => {\n\n    const { setOnCountyId, oneCountyData, setCountyCase, setYMax } = props;\n\n    const [stateLocation, setStateLocation] = useState([]);\n    const [countyLocation, setCountyLocation] = useState([]);\n    const [countyList, setCountyList] = useState([]);\n    const [displayCounty, setDisplayCounty] = useState({});\n\n    useEffect(() => {\n      csv(csvLocation).then(state => {\n        let tempState = state.filter(d => d.type === \"state\").map(d =>  {\n            return { value: d.fips, label: d.name };\n          });\n        setStateLocation(tempState);\n        let tempCounty = state.filter(d => d.type === \"county\").map(d =>  {\n          return { value: d.fips, label: d.name, state: d.state };\n        });\n        setCountyLocation(tempCounty); // {value: \"45001\", label: \"Abbeville County\", state: \"SouthCarolina\"}\n        let firstCounty = tempCounty.filter(d => d.state === \"Washington\");\n        setCountyList(firstCounty);\n      })\n    }, []);\n\n    return (\n      <div style={{ margin: \"20px auto\", maxWidth: \"500px\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\n        <p className=\"option-button\" style={{ cursor: \"default\"}}>Choose your state: </p>\n        <Select \n          defaultValue={{ value: 53, label: \"Washington\" }}\n          name=\"states\"\n          options={stateLocation}\n          styles={customStyles}\n          onChange={ e => {\n              let newCountyList = [...countyLocation].filter(d => d.state === e.label);\n              // console.log(e.label); // \"Hawaii\"\n              // console.log(newCountyList);\n              setCountyList(newCountyList);\n              setDisplayCounty(newCountyList[0]);\n          }}\n          />\n        <p className=\"option-button\" style={{ cursor: \"default\"}}>county: </p>\n        <Select \n          name=\"county\"\n          options={countyList}\n          styles={customStyles}\n          // defaultValue={displayCounty}\n          onChange={value => {\n            setOnCountyId(value.value);\n            setCountyCase(oneCountyData[value.value]);\n            setYMax(Math.round(oneCountyData[value.value]));\n          }}\n          />\n      </div>\n    )\n\n}\n\nexport default CountySelection;","import React, { useState, useEffect } from \"react\";\nimport { ComposableMap, Geographies, Geography } from \"react-simple-maps\"\n\nimport { csv } from \"d3-fetch\";\nimport csvCounty from \"../Data/County/JHU_IncidentCases_County.csv\";\nimport csvLocation from \"../Data/locations_information.csv\";\nimport { scaleQuantile } from \"d3-scale\";\nimport CountyChart from \"./CountyChart\";\nimport ReactTooltip from \"react-tooltip\";\nimport CountySelection from \"./CountySelection\";\nimport config from \"../config.json\"\n\n\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/counties-10m.json\";\nconst latestDate = config.dataEndDate;\n\nconst Counties = () => {\n\n    const [countyData, setCountyData] = useState([]); // for mapping\n    const [onCountyId, setOnCountyId] = useState(\"53033\"); // initialize king county data\n    const [allCountiesData, setAllCountiesData] = useState([]);\n    const [oneCountyData, setoneCountyData] = useState([]);\n    const [countyCase, setCountyCase] = useState(config.dataKingCountyEndValue);\n    const [countyLocation, setCountyLocation] = useState([]);\n    const [tooltip, setTooltip] = useState('');\n    const [yMax, setYMax] = useState(config.dataKingCountyEndValue);\n\n\n    useEffect(() => {\n        csv(csvCounty).then(county => {\n            let co = county[county.length-5];\n            let converted = Object.keys(co).map(key => ({ key, cases: co[key]}));\n            setCountyData(converted); // console.log(countyData) -- {key: \"10001\", cases: \"1974.1572909406702\"}\n            setAllCountiesData(county);\n            setoneCountyData(co);\n        })\n    }, []);\n\n    useEffect(() => {\n        csv(csvLocation).then(loc => {\n            setCountyLocation(loc.filter(d => d.type === \"county\"));\n        })\n    }, []);\n\n    let countyName = countyLocation.filter(d => d.fips === onCountyId).map(d => `${d.name} county in ${d.state}`);\n\n    const colorScale = scaleQuantile()\n        .domain(countyData.map(d => d.cases))\n        .range([\n            \"#ffedea\",\n            \"#ffcec5\",\n            \"#ffad9f\",\n            \"#ff8a75\",\n            \"#ff5533\",\n            \"#e2492d\",\n            \"#be3d26\",\n            \"#9a311f\",\n            \"#782618\"\n        ]);\n\n    return (\n        <div>\n            {onCountyId && <CountySelection onCountyId={onCountyId} setOnCountyId={setOnCountyId} oneCountyData={oneCountyData} setCountyCase={setCountyCase} setYMax={setYMax} />}\n\n            <p style={{fontSize: \"20px\", fontWeight: \"300\"}}>In the <code>{countyName}</code>, on the week ending on <code>{latestDate}</code>, <br/>there were <code>{Math.round(countyCase)}</code> reported COVID-19 cases per 100K people.</p>\n            <div className=\"vis-wrapper\">\n                <div className=\"forecast usmap\" >\n                    <ComposableMap data-tip=\"\" projection=\"geoAlbersUsa\" projectionConfig={{ scale: 800 }}\n                            width={900} style={{ width: \"100%\", height: \"auto\" }}>\n                        <Geographies geography={geoUrl}>\n                            {({ geographies }) =>\n                            geographies.map(geo => {\n                                const cur = countyData.find(s => s.key === geo.id);\n                                return (\n                                <Geography\n                                    key={geo.rsmKey}\n                                    geography={geo}\n                                    fill={cur ? colorScale(cur.cases) : \"#EEE\"}\n                                    onClick={() => {\n                                        setOnCountyId(cur.key);\n                                        setCountyCase(cur.cases);\n                                        setYMax(Math.round(cur.cases));\n                                    }}\n                                    onMouseEnter={() => {\n                                        setTooltip(`${geo.properties.name} county : ${Math.round(cur.cases)}`);\n                                    }}\n                                    onMouseLeave={() => {\n                                        setTooltip(\"\");\n                                    }}\n                                />\n                                );\n                            })\n                            }\n                        </Geographies>\n                    </ComposableMap>\n                    <ReactTooltip backgroundColor=\"#b3b3b3\" textColor=\"#1a1a1a\">{tooltip}</ReactTooltip>\n                </div>\n            {allCountiesData && <CountyChart onCountyId={onCountyId} allCountiesData={allCountiesData} yMax={yMax} /> }\n        </div>\n    </div>\n    )\n}\n\nexport default Counties;","import React, { useState } from \"react\";\nimport National from \"../Components/National\";\nimport States from \"./States\";\nimport Counties from \"./Counties\";\n\nimport ReactGA from 'react-ga';\nimport config from \"../config.json\"\n\n\nconst Forecast = () => {\n\n    const [isNational, setIsNationl] = useState(true);\n    const [isState, setIsState] = useState(false);\n    const [isCounty, setIsCounty] = useState(false);\n\n    const clickHandler = (name) => {\n        ReactGA.event({\n            category: name,\n            action: 'Switch forecast page view'\n        });\n    };\n\n    return (\n        <div className=\"container\">\n            <p className=\"text-height\" style={{maxWidth: \"900px\", margin: \"0 auto 30px auto\", textAlign: \"left\"}}><code>One Quiet Night</code> develops scientifically-driven machine learning models to accurately predict the spread of COVID-19 infections. This generates accurate forecasts that are competitive with and different from the current set of models in the <a href=\"https://c3.ai/customers/covid-19-data-lake/\" className=\"c3-ai-link\">CDC COVID-19 ensemble</a>.\n            We operationalize the forecast to retrain the model and make predictions on new data.</p>\n            <p className=\"text-height\" style={{maxWidth: \"900px\", margin: \"0 auto 30px auto\", textAlign: \"left\"}}>Our historical forecasts can be found on <a className=\"c3-ai-link\" href=\"https://viz.covid19forecasthub.org/\">COVID-19 Forecast Hub</a>.</p>\n            <div className=\"options\">\n                <p className=\"option-button\" style={{cursor: \"default\"}}>Choose your view:</p>\n                <p className={isNational ? \"selected\" : \"option-button\"}\n                    onClick={()=>{\n                    setIsNationl(true)\n                    setIsState(false)\n                    setIsCounty(false)\n                    clickHandler('National')}}>National</p>\n                <p className={isState ? \"selected\" : \"option-button\"}\n                    onClick={()=> {\n                    setIsNationl(false);\n                    setIsState(true)\n                    setIsCounty(false)\n                    clickHandler('State')}} >States</p>\n                <p className={isCounty ? \"selected\" : \"option-button\"}\n                    onClick={()=> {\n                    setIsNationl(false);\n                    setIsState(false)\n                    setIsCounty(true)\n                    clickHandler('County')}} >Counties</p>\n            </div>\n            <div style={{boxShadow: \"0 0 6px rgba(0,0,0,.25)\",   borderRadius: \"4px\", padding: \"1rem .55rem\"}}>\n                <h3 style={{ fontSize: \"25px\", fontWeight: \"300\"}}>Weekly reported COVID-19 new cases per 100,000 people</h3>\n                {\n                    isNational ? <National /> : isState ? <States /> : <Counties />\n                }\n                <p className=\"text-height\">* First Covid-19 Vaccine Given to U.S. on Dec 14, 2020 in New York.</p>\n            </div>\n            <p className=\"text-height\" style={{maxWidth: \"500px\", fontSize: \"12px\", margin: \"30px auto 0 auto\"}}>Weekly data last updated: {config.dataEndDate}</p>\n            <p className=\"text-height\" style={{maxWidth: \"500px\", fontSize: \"12px\", margin: \"15px auto 0 auto\"}}><code>One Quiet Night</code> uses data from <a href=\"https://c3.ai/customers/covid-19-data-lake/\" className=\"c3-ai-link\">C3 AI COVID-19 Data Lake</a> and visualizes weekly COVID-19 cases and 4 weeks forecast from our forecasting model.</p>\n        </div>\n    )\n}\n\nexport default Forecast;","import React from 'react';\n\nconst Model = () => {\n    return (\n        <div className=\"container\">\n            <h1>Our Covid-19 Forecast Model</h1>\n            <div style={{ textAlign: \"left\", maxWidth: \"800px\", margin: \"0 auto\"}}>\n                <h2 className=\"profile-name\">Introduction</h2>\n                <p className=\"text-height\">Our ability to contain the coronavirus pandemic depends on being able to forecast potential outbreaks and on understanding its driving forces.</p>\n                <p className=\"text-height\">In this work, we develop scientifically-driven machine learning models to accurately predict the spread of Covid-19 infections using real-time data. </p>\n                <p className=\"text-height\"><a href=\"https://c3.ai/customers/covid-19-data-lake/\" className=\"c3-ai-link\">C3 AI Covid-19 Data Lake </a>collects and organizes various data sets that may bear on the spread of Covid-19 -- daily case reports, movement trends, weather reports, and economic changes. Our models use this data to make predictions about future increases in Covid-19 cases at the county, state, and national levels in the United States.</p>\n                <h2 className=\"profile-name\" style={{marginTop: \"50px\"}}>Problem Description</h2>\n                <p className=\"text-height\">As coronavirus cases surge across the country, epidemiology and data science communities have come together to generate more accurate forecasts. Accurate forecasts help government and public health officials prevent and control coronavirus outbreaks.</p>\n                <p className=\"text-height\"><a href=\"https://www.cdc.gov/coronavirus/2019-ncov/covid-data/mathematical-modeling.html\" className=\"c3-ai-link\">The official CDC Covid-19 forecast </a>uses an ensemble of models to predict the number of new cases that are likely to arise in different geographic locations. The CDC Covid-19 forecast currently predicts national, state, and county numbers of new Covid-19 cases per week for the next 4 weeks using forecasts from 21 modeling groups. To aid this effort, we develop and operationalize an accurate Covid-19 forecast using the available data from the C3 AI Covid-19 Data Lake.</p>\n                <h2 className=\"profile-name\" style={{marginTop: \"50px\"}}>Broad Approach</h2>\n                <p className=\"text-height\">Coronavirus is thought to spread from person to person. A typical case starts with a person coming into contact with a patient, who may not have symptoms. The virus has a chance to spread to the person during each contact. When the virus is successful, the person becomes infected and infectious to other people. The virus spreads exponentially in this way.</p>\n                <p className=\"text-height\">Epidemiological models use the structural knowledge of the spread of the virus to make predictions using the number of infected individuals and the number of transmittive contact. But it is difficult to measure how many infected individuals there really are and with whom they had close contact. Instead, we only have some imperfect measurements of a set of inputs that may have bearing on these components. On the other hand, it has also been difficult to apply machine learning models because we have limited historical data marred by structural changes from policy decisions and changes in public behavior.</p>\n                <p className=\"text-height\">In order to learn the useful relations between variables in a data efficient manner, we develop a methodology that augments scientific models with machine-learnable structures. Our models use temporal and spatial features of the daily case reports and movement trends data to accurately predict future Covid-19 cases. Our forecast based on these models achieves state-of-the-art accuracies.\n</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Model;","import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport './App.css';\n\nimport Nav from './Components/Nav';\n// import Footer from './Components/Footer';\n\nimport About from './Components/About';\nimport PageNotFound from './Components/PageNotFound';\n\nimport Forecast from './Components/Forecast';\nimport Model from './Components/Model';\n\nimport ReactGA from 'react-ga';\n\nfunction App() {\n\n  useEffect(() => {\n    ReactGA.initialize('UA-184785449-2');\n    ReactGA.pageview(window.location.pathname + window.location.search);\n    // ReactGA.pageview('/');\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Switch>\n        <Route exact path=\"/vis\" component={Forecast} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/model\" component={Model} />\n        <Route path=\"/forecast\" component={Forecast} />\n        <Route component={PageNotFound} />\n      </Switch>\n      {/* <Footer /> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}