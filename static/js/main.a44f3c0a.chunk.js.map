{"version":3,"sources":["Components/Nav.js","Components/Footer.js","Assets/one-quiet-night-logo.jpg","Assets/areum-jo.jpg","Assets/jae-cho.jpg","Components/About.js","Assets/notFound404.svg","Components/PageNotFound.js","Components/Docs.js","Assets/c3-ai.jpg","Components/C3.js","Data/Country/JHU_IncidentCases_Country.csv","Components/National.js","Data/State/JHU_CumulativeCases_State.csv","Components/StatesChart.js","Components/States.js","Data/County/JHU_CumulativeCases_County.csv","Data/locations_information.csv","Components/CountyChart.js","Components/Counties.js","Components/Forecast.js","App.js","reportWebVitals.js","index.js"],"names":["Nav","className","to","style","color","Footer","About","paddingTop","fontSize","justifyContent","maxWidth","margin","src","logo","alt","textAlign","fontWeight","href","target","rel","marginTop","areum","size","jae","NotFoundPage","PageNotFound","Docs","C3","c3ai","offsets","DC","formatXAxis","tickItem","toString","National","useState","nationalData","setNationlData","nationalCase","setNationalCase","useEffect","csv","csvNation","then","nat","latest","length","Math","round","projection","projectionConfig","scale","width","height","geography","geographies","map","geo","stroke","default","fill","strokeWidth","outline","hover","pressed","rsmKey","centroid","geoCentroid","cur","allStates","find","s","val","id","Object","keys","indexOf","coordinates","y","textAnchor","subject","dx","dy","x","alignmentBaseline","data","top","right","bottom","left","type","dataKey","dot","strokeDasharray","vertical","axisLine","tickLine","tickFormatter","domain","label","position","value","offset","formatter","Intl","NumberFormat","format","StatesChart","props","onStateId","plotData","allStatesData","d","date","dates","cases","x1","x2","y1","strokeOpacity","States","stateData","setStateData","setOnStateId","setAllStatesData","stateCase","setStateCase","setError","tooltip","setTooltip","setForecast","isSubscribed","csvState","state","st","converted","key","forecastSt","forecastCov","catch","error","stateInfo","filter","name","colorScale","scaleQuantile","range","data-tip","onClick","onMouseEnter","properties","onMouseLeave","backgroundColor","textColor","CountyChart","onCountyId","allCountiesData","Counties","countyData","setCountyData","setOnCountyId","setAllCountiesData","countyCase","setCountyCase","countyLocation","setCountyLocation","csvCounty","county","co","csvLocation","loc","countyName","fips","console","log","Forecast","isNational","setIsNationl","isState","setIsState","isCounty","setIsCounty","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNAmBeA,G,OAhBH,WAER,OACI,yBAAQC,UAAU,aAAlB,UACI,cAAC,IAAD,CAAMC,GAAG,IAAT,SAAa,oBAAIC,MAAO,CAACC,MAAO,SAAnB,+BACb,sBAAKH,UAAU,YAAf,UACI,cAAC,IAAD,CAAMC,GAAG,YAAT,SAAqB,2CACrB,cAAC,IAAD,CAAMA,GAAG,SAAT,SAAkB,wCAClB,cAAC,IAAD,CAAMA,GAAG,QAAT,SAAiB,4CACjB,cAAC,IAAD,CAAMA,GAAG,kBAAT,SAA2B,mECG5BG,EAZA,WACX,OACI,mCACI,cAAC,IAAD,CAAMH,GAAG,IAAT,SAAa,mDACb,cAAC,IAAD,CAAMA,GAAG,SAAT,SAAkB,wCAClB,cAAC,IAAD,CAAMA,GAAG,QAAT,SAAiB,4CACjB,cAAC,IAAD,CAAMA,GAAI,cAAV,SAAwB,6CACxB,mBAAGD,UAAU,aAAb,iECVG,MAA0B,iDCA1B,MAA0B,qCCA1B,MAA0B,oC,QCiD1BK,EA1CD,WACV,OACI,sBAAKL,UAAU,YAAYE,MAAO,CAAEI,WAAY,QAAhD,UACI,oBAAGN,UAAU,eAAeE,MAAO,CAAEK,SAAU,QAA/C,2BAAsE,sDACtE,sBAAKP,UAAU,cAAcE,MAAO,CAAEM,eAAgB,SAAUC,SAAU,QAASC,OAAQ,aAA3F,UACI,8BACI,qBAAKV,UAAU,WAAWW,IAAKC,EAAMC,IAAI,yCAE7C,sBAAKb,UAAU,cAAcE,MAAO,CAAEQ,OAAQ,aAAcI,UAAW,QAAvE,UACI,mGACA,4BAAG,sBAAMZ,MAAO,CAAEY,UAAW,OAAQC,WAAY,MAAOR,SAAU,QAA/D,gFACH,4BAAG,sBAAML,MAAO,CAAEY,UAAW,OAAQC,WAAY,MAAOR,SAAU,OAAQG,OAAQ,cAA/E,8DACH,8BAAG,mBAAGV,UAAU,aAAagB,KAAK,8CAA8CC,OAAO,SAASC,IAAI,aAAjG,sCAAH,oZAIR,sBAAKlB,UAAU,QAAQE,MAAO,CAACiB,UAAW,QAA1C,UACI,gCACI,oBAAGnB,UAAU,eAAb,4BAA2C,uBAA3C,IAAiD,sBAAMA,UAAU,gBAAhB,4CACjD,qBAAKW,IAAKS,EAAOpB,UAAU,UAAUa,IAAI,kBACzC,mBAAGb,UAAU,cAAcE,MAAO,CAACO,SAAU,SAA7C,qcACA,sBAAKT,UAAU,QAAf,UACI,oBAAGgB,KAAK,6BAA6BC,OAAO,SAASC,IAAI,aAAzD,UAAsE,cAAC,IAAD,CAAUG,KAAM,GAAIlB,MAAM,YAAhG,OACA,mBAAGa,KAAK,wCAAwCC,OAAO,SAASC,IAAI,aAApE,SAAiF,cAAC,IAAD,CAAYG,KAAM,GAAIlB,MAAM,cAC7G,mBAAGa,KAAK,sBAAsBC,OAAO,SAASC,IAAI,aAAlD,SAA+D,cAAC,IAAD,CAAUG,KAAM,GAAIlB,MAAM,oBAGjG,gCACI,oBAAGH,UAAU,eAAb,2BAA0C,uBAA1C,IAAgD,sBAAMA,UAAU,gBAAhB,+BAChD,qBAAKW,IAAKW,EAAKtB,UAAU,UAAUa,IAAI,gBACvC,mBAAGb,UAAU,cAAcE,MAAO,CAACO,SAAU,SAA7C,6fACA,sBAAKT,UAAU,QAAf,UACI,mBAAGgB,KAAK,0BAA0BC,OAAO,SAASC,IAAI,aAAtD,SAAmE,cAAC,IAAD,CAAUG,KAAM,GAAIlB,MAAM,cAC7F,mBAAGa,KAAK,uCAAuCC,OAAO,SAASC,IAAI,aAAnE,SAAgF,cAAC,IAAD,CAAYG,KAAM,GAAIlB,MAAM,cAC5G,mBAAGa,KAAK,uCAAuCC,OAAO,SAASC,IAAI,aAAnE,SAAgF,cAAC,IAAD,CAAUG,KAAM,GAAIlB,MAAM,2BCzCnH,MAA0B,wCCiB1BoB,EAbM,WACjB,OACI,sBAAKvB,UAAU,YAAf,UACI,+CACA,qBAAKW,IAAKa,EAActB,MAAO,CAAEO,SAAU,QAASC,OAAQ,YAC5D,4EACA,iCACE,cAAC,IAAD,CAAMT,GAAG,IAAIC,MAAO,CAACC,MAAO,SAA5B,+BCECsB,EAXF,WACT,OACI,sBAAKzB,UAAU,YAAf,UACI,oDACA,mBAAGA,UAAU,cAAb,4kBACA,6DACA,mBAAGA,UAAU,cAAb,glBCRG,MAA0B,kCC2C1B0B,EAxCJ,WACP,OACI,sBAAK1B,UAAU,YAAf,UACI,qBAAKW,IAAKgB,EAAMd,IAAI,iCAAiCX,MAAO,CAAC,SAAY,WAEzE,sBAAKF,UAAU,cAAcE,MAAO,CAACO,SAAU,QAASK,UAAW,OAAQJ,OAAQ,UAAnF,UAA+F,qBAAIV,UAAU,eAAd,6BAA6C,mBAAGA,UAAU,cAAcgB,KAAK,4DAA4DC,OAAO,SAASC,IAAI,aAAhH,0CACxI,mBAAGlB,UAAU,eAAb,qCACA,qBAAIA,UAAU,QAAd,kDACI,gGACA,+GACA,4EACA,4EACA,2HAEJ,qBAAIA,UAAU,QAAd,2DACI,8GAEJ,qBAAIA,UAAU,QAAd,mFACI,0DACA,iEACA,4DACA,2EACA,qDACA,uDAEJ,qBAAIA,UAAU,QAAd,+CACI,oVAEJ,qBAAIA,UAAU,QAAd,8DACI,wGAEJ,qBAAIA,UAAU,QAAd,8CACI,uGACA,iI,kCCpCL,MAA0B,sD,eCYnC4B,EAAU,CACZC,GAAI,CAAC,GAAI,KAIPC,EAAc,SAACC,GACjB,OAAOA,EAASC,YAiGLC,EA9FE,WAAO,IAAD,EAEoBC,mBAAS,IAF7B,mBAEZC,EAFY,KAEEC,EAFF,OAGqBF,mBAAS,IAH9B,mBAGZG,EAHY,KAGEC,EAHF,KAanB,OARAC,qBAAU,WACNC,YAAIC,GAAWC,MAAK,SAAAC,GAChBP,EAAeO,GACf,IAAIC,EAASD,EAAIA,EAAIE,OAAO,GAC5BP,EAAgBM,EAAM,SAE3B,IAGC,gCACI,oBAAG1C,MAAO,CAACK,SAAU,OAAQQ,WAAY,OAAzC,oBAAwD,wCAAxD,QAA8E,+BArBvE,oBAqBP,gBAAoH,+BAAO+B,KAAKC,MAAMV,KAAtI,+CACA,sBAAKrC,UAAU,cAAf,UACI,qBAAKA,UAAU,iBAAf,SACI,cAAC,gBAAD,CAAegD,WAAW,eAC1BC,iBAAkB,CAAEC,MAAO,KAC3BC,MAAO,IACPjD,MAAO,CAAEiD,MAAO,OAAQC,OAAQ,QAHhC,SAII,cAAC,cAAD,CAAaC,UAjCtB,0DAiCS,SACK,gBAAGC,EAAH,EAAGA,YAAH,OACD,qCACKA,EAAYC,KAAI,SAAAC,GAAG,OACpB,cAAC,YAAD,CAEIC,OAAO,OACPJ,UAAWG,EACXtD,MAAO,CACCwD,QAAS,CACLC,KAAM,OACNF,OAAQ,OACRG,YAAa,EACbC,QAAS,QACbC,MAAO,CACHH,KAAM,UACNF,OAAQ,OACRG,YAAa,EACbC,QAAS,QACbE,QAAS,CACLJ,KAAM,UACNF,OAAQ,UACRI,QAAS,UAjBhBL,EAAIQ,WAmBZV,EAAYC,KAAI,SAAAC,GACjB,IAAMS,EAAWC,YAAYV,GACvBW,EAAMC,EAAUC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,MAAQf,EAAIgB,MAC9C,OACI,4BACCL,GACGF,EAAS,IAAM,KACfA,EAAS,IAAM,MAC4B,IAA1CQ,OAAOC,KAAK9C,GAAS+C,QAAQR,EAAIK,IAClC,cAAC,SAAD,CAAQI,YAAaX,EAArB,SACI,sBAAMY,EAAE,IAAItE,SAAU,GAAIuE,WAAW,SAArC,SAA+CX,EAAIK,OAGvD,cAAC,aAAD,CAAYO,QAASd,EAAUe,GAAIpD,EAAQuC,EAAIK,IAAI,GAAIS,GAAIrD,EAAQuC,EAAIK,IAAI,GAA3E,SACI,sBAAMU,EAAG,EAAG3E,SAAU,GAAI4E,kBAAkB,SAA5C,SAAsDhB,EAAIK,SAV1DhB,EAAIQ,OAAS,sBAsB3C7B,GACF,qBAAKnC,UAAU,WAAf,SACI,eAAC,IAAD,CAAWmD,MAAO,IAAKC,OAAQ,IAAKgC,KAAMjD,EAAczB,OAAQ,CAAE2E,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,GAAxG,UACI,cAAC,IAAD,CAAMC,KAAK,WAAWC,QAAQ,KAAKjC,OAAO,UAAUG,YAAa,EAAG+B,KAAK,IAEzE,cAAC,IAAD,CAAelC,OAAO,OAAOmC,gBAAgB,MAAMC,UAAU,IAC7D,cAAC,IAAD,CAAOH,QAAQ,QAAQnF,SAAS,KAAKuF,UAAU,EAAOC,UAAU,EAAOC,cAAelE,IACtF,cAAC,IAAD,CAAOvB,SAAS,KAAKuF,UAAU,EAAOC,UAAU,EAAOE,OAAQ,CAAC,EAAG,OACnE,cAAC,IAAD,CAAef,EAAE,aAAazB,OAAO,UAAUmC,gBAAgB,MAAMM,MAAO,CAAEC,SAAU,SAAUC,MAAO,mBAAoB7F,SAAU,KAAMoD,KAAK,UAAW0C,OAAQ,MACrK,cAAC,IAAD,CAAenB,EAAE,aAAazB,OAAO,UAAUmC,gBAAgB,MAAMM,MAAO,CAAEC,SAAU,gBAAkBC,MAAO,6BAA8BzC,KAAM,UAAWpD,SAAU,QAC1K,cAAC,IAAD,CAAe2E,EAAE,aAAazB,OAAO,UAAUmC,gBAAgB,MAAMM,MAAO,CAAEC,SAAU,SAAUC,MAAO,oBAAqBzC,KAAM,UAAW0C,OAAQ,GAAI9F,SAAU,QACrK,cAAC,IAAD,CAAe2E,EAAE,aAAazB,OAAO,UAAUmC,gBAAgB,MAAMM,MAAO,CAAEC,SAAU,SAAUC,MAAO,2BAA4BzC,KAAM,UAAW0C,OAAQ,GAAI9F,SAAU,QAC5K,cAAC,IAAD,CAAe2E,EAAE,aAAazB,OAAO,UAAUmC,gBAAgB,MAAMM,MAAO,CAAEC,SAAU,SAAUC,MAAO,eAAgBzC,KAAM,UAAW0C,OAAQ,GAAI9F,SAAU,QAChK,cAAC,IAAD,CAAS+F,UAAW,SAAAF,GAAK,OAAI,IAAIG,KAAKC,aAAa,MAAMC,OAAO3D,KAAKC,MAAMqD,mB,QC1GhF,MAA0B,sD,SC+B1BM,EA3BK,SAAEC,GAAY,IACxBC,EAA6BD,EAA7BC,UAEFC,EAF+BF,EAAlBG,cAEYvD,KAAI,SAASwD,GACtC,MAAO,CAAEC,KAAMD,EAAEE,MAAOC,MAAOH,EAAEH,OAGrC,OACI,qBAAK5G,UAAU,WAAf,SACI,eAAC,IAAD,CAAWmD,MAAO,IAAKC,OAAQ,IAAKgC,KAAMyB,EAAUnG,OAAQ,CAAE2E,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,GAApG,UACI,cAAC,IAAD,CAAe/B,OAAO,OAAOmC,gBAAgB,MAAMC,UAAU,IAC7D,cAAC,IAAD,CAAOH,QAAQ,OAAOnF,SAAS,KAAKuF,UAAU,EAAOC,UAAU,IAC/D,cAAC,IAAD,CAAOxF,SAAS,KAAKuF,UAAU,EAAOC,UAAU,EAAOE,OAAQ,CAAC,EAAG,OACnE,cAAC,IAAD,CAAef,EAAE,aAAazB,OAAO,UAAUmC,gBAAgB,MAAMM,MAAO,CAAEC,SAAU,SAAUC,MAAO,mBAAoB7F,SAAU,KAAMoD,KAAK,UAAW0C,OAAQ,MACrK,cAAC,IAAD,CAAenB,EAAE,aAAazB,OAAO,UAAUmC,gBAAgB,MAAMM,MAAO,CAAEC,SAAU,gBAAkBC,MAAO,6BAA8BzC,KAAM,UAAWpD,SAAU,QAC1K,cAAC,IAAD,CAAe2E,EAAE,aAAazB,OAAO,UAAUmC,gBAAgB,MAAMM,MAAO,CAAEC,SAAU,SAAUC,MAAO,oBAAqBzC,KAAM,UAAW0C,OAAQ,GAAI9F,SAAU,QACrK,cAAC,IAAD,CAAe2E,EAAE,aAAazB,OAAO,UAAUmC,gBAAgB,MAAMM,MAAO,CAAEC,SAAU,SAAUC,MAAO,2BAA4BzC,KAAM,UAAW0C,OAAQ,GAAI9F,SAAU,QAC5K,cAAC,IAAD,CAAe2E,EAAE,aAAazB,OAAO,UAAUmC,gBAAgB,MAAMM,MAAO,CAAEC,SAAU,SAAUC,MAAO,eAAgBzC,KAAM,UAAW0C,OAAQ,GAAI9F,SAAU,QAChK,cAAC,IAAD,CAAe4G,GAAG,aAAaC,GAAG,aAAaC,GAAI,EAAG5D,OAAO,MAAM6D,cAAe,GAAKpB,MAAO,CAAEE,MAAO,WAAY7F,SAAU,KAAM4F,SAAU,iBAC7I,cAAC,IAAD,CAAMV,KAAK,WAAWC,QAAQ,QAAQjC,OAAO,UAAUG,YAAa,EAAG+B,KAAK,IAC5E,cAAC,IAAD,CAASW,UAAW,SAAAF,GAAK,OAAI,IAAIG,KAAKC,aAAa,MAAMC,OAAO3D,KAAKC,MAAMqD,aCTrFxE,EAAU,CACZC,GAAI,CAAC,GAAI,KA2HE0F,EAtHA,WAAO,IAAD,EAEiBrF,mBAAS,IAF1B,mBAEVsF,EAFU,KAECC,EAFD,OAGiBvF,mBAAS,MAH1B,mBAGV0E,EAHU,KAGCc,EAHD,OAIyBxF,mBAAS,IAJlC,mBAIV4E,EAJU,KAIKa,EAJL,OAKiBzF,mBAAS,QAL1B,mBAKV0F,EALU,KAKCC,EALD,OAMS3F,mBAAS,IANlB,mBAMH4F,GANG,aAOa5F,mBAAS,IAPtB,mBAOV6F,EAPU,KAODC,EAPC,OAQe9F,mBAAS,IARxB,mBAQA+F,GARA,WAWjB1F,qBAAU,WACN,IAAI2F,GAAe,EAanB,OAZA1F,YAAI2F,GAAUzF,MAAK,SAAA0F,GACf,GAAIF,EAAc,CACd,IAAIG,EAAKD,EAAMA,EAAMvF,OAAO,GACxByF,EAAY7D,OAAOC,KAAK2D,GAAI9E,KAAI,SAAAgF,GAAG,MAAK,CAAEA,MAAKrB,MAAOmB,EAAGE,OACzDC,EAAaJ,EAAMA,EAAMvF,OAAO,GAChC4F,EAAchE,OAAOC,KAAK8D,GAAYjF,KAAI,SAAAgF,GAAG,MAAK,CAAEA,MAAKrB,MAAOmB,EAAGE,OACvEd,EAAaa,GACbX,EAAiBS,GACjBH,EAAYQ,OAGnBC,OAAM,SAAAC,GAAK,OAAKT,EAAeJ,EAASa,EAAM3G,YAAc,QACtD,kBAAMkG,GAAe,KAC7B,IAEH,IAAMU,EAAYxE,EAAUyE,QAAO,SAAA9B,GAAC,OAAIA,EAAExC,MAAQqC,KAAWrD,KAAI,SAAAwD,GAAC,OAAIA,EAAE+B,QAElEC,EAAaC,cACd/C,OAAOuB,EAAUjE,KAAI,SAAAwD,GAAC,OAAIA,EAAEG,UAC5B+B,MAAM,CACH,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAKR,OACI,gCACI,oBAAG/I,MAAO,CAACK,SAAU,OAAQQ,WAAY,OAAzC,gBAAoD,+BAAO6H,IAA3D,cAAuF,+BAlDhF,oBAkDP,gBAA6H,+BAAO9F,KAAKC,MAAM6E,KAA/I,+CACA,sBAAK5H,UAAU,cAAf,UACQ,sBAAKA,UAAU,iBAAf,UACA,cAAC,gBAAD,CAAekJ,WAAS,GAAGlG,WAAW,eACtCC,iBAAkB,CAAEC,MAAO,KAC3BC,MAAO,IACPjD,MAAO,CAAEiD,MAAO,OAAQC,OAAQ,QAHhC,SAII,cAAC,cAAD,CAAaC,UA/DtB,0DA+DS,SACK,gBAAGC,EAAH,EAAGA,YAAH,OACD,qCACMA,EAAYC,KAAI,SAAAC,GACd,IAAMW,EAAMqD,EAAUnD,MAAK,SAAAC,GAAC,OAAIA,EAAEiE,MAAQ/E,EAAIgB,MAC9C,OACI,cAAC,YAAD,CAEAnB,UAAWG,EACXG,KAAMQ,EAAM4E,EAAW5E,EAAI+C,OAAS,OACpCzD,OAAO,OACPvD,MAAO,CACH4D,MAAO,CACHL,OAAQ,UACRG,YAAa,IAGrBuF,QAAS,WACLzB,EAAavD,EAAIoE,KACjBV,EAAa1D,EAAI+C,QAErBkC,aAAc,WACVpB,EAAW,GAAD,OAAIxE,EAAI6F,WAAWP,KAAnB,aAA4BhG,KAAKC,MAAMoB,EAAI+C,UAEzDoC,aAAc,WACVtB,EAAW,MAlBVxE,EAAIQ,WAuBhBV,EAAYC,KAAI,SAAAC,GACjB,IAAMS,EAAWC,YAAYV,GACvBW,EAAMC,EAAUC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,MAAQf,EAAIgB,MAC9C,OACI,4BACCL,GACGF,EAAS,IAAM,KACfA,EAAS,IAAM,MAC4B,IAA1CQ,OAAOC,KAAK9C,GAAS+C,QAAQR,EAAIK,IAClC,cAAC,SAAD,CAAQI,YAAaX,EAArB,SACI,sBAAMY,EAAE,IAAItE,SAAU,GAAIuE,WAAW,SAArC,SAA+CX,EAAIK,OAGvD,cAAC,aAAD,CAAYO,QAASd,EAAUe,GAAIpD,EAAQuC,EAAIK,IAAI,GAAIS,GAAIrD,EAAQuC,EAAIK,IAAI,GAA3E,SACI,sBAAMU,EAAG,EAAG3E,SAAU,GAAI4E,kBAAkB,SAA5C,SAAsDhB,EAAIK,SAV1DhB,EAAIQ,OAAS,oBAoBrC,cAAC,IAAD,CAAcuF,gBAAgB,UAAUC,UAAU,UAAlD,SAA6DzB,OAEpEjB,GAAiB,cAAC,EAAD,CAAaF,UAAWA,EAAWE,cAAeA,EAAec,UAAWA,WCpI3F,MAA0B,uDCA1B,MAA0B,kDC8B1B6B,EA1BK,SAAE9C,GAAY,IACxB+C,EAAgC/C,EAAhC+C,WAEF7C,EAFkCF,EAApBgD,gBAEapG,KAAI,SAASwD,GACxC,MAAO,CAAEC,KAAMD,EAAEE,MAAOC,MAAOH,EAAE2C,OAGrC,OACI,qBAAK1J,UAAU,WAAf,SACI,eAAC,IAAD,CAAWmD,MAAO,IAAKC,OAAQ,IAAKgC,KAAMyB,EAAUnG,OAAQ,CAAE2E,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,GAApG,UACI,cAAC,IAAD,CAAMC,KAAK,WAAWC,QAAQ,QAAQjC,OAAO,UAAUG,YAAa,EAAG+B,KAAK,IAC5E,cAAC,IAAD,CAAelC,OAAO,OAAOmC,gBAAgB,MAAMC,UAAU,IAC7D,cAAC,IAAD,CAAOH,QAAQ,OAAOnF,SAAS,KAAKuF,UAAU,EAAOC,UAAU,IAC/D,cAAC,IAAD,CAAOxF,SAAS,KAAKuF,UAAU,EAAOC,UAAU,EAAOE,OAAQ,CAAC,EAAG,OACnE,cAAC,IAAD,CAAef,EAAE,aAAazB,OAAO,UAAUmC,gBAAgB,MAAMM,MAAO,CAAEC,SAAU,SAAUC,MAAO,mBAAoB7F,SAAU,KAAMoD,KAAK,UAAW0C,OAAQ,QACrK,cAAC,IAAD,CAAenB,EAAE,aAAazB,OAAO,UAAUmC,gBAAgB,MAAMM,MAAO,CAAEC,SAAU,gBAAkBC,MAAO,6BAA8BzC,KAAM,UAAWpD,SAAU,QAC1K,cAAC,IAAD,CAAe2E,EAAE,aAAazB,OAAO,UAAUmC,gBAAgB,MAAMM,MAAO,CAAEC,SAAU,SAAUC,MAAO,oBAAqBzC,KAAM,UAAW0C,OAAQ,KAAM9F,SAAU,QACvK,cAAC,IAAD,CAAe2E,EAAE,aAAazB,OAAO,UAAUmC,gBAAgB,MAAMM,MAAO,CAAEC,SAAU,SAAUC,MAAO,2BAA4BzC,KAAM,UAAW0C,OAAQ,KAAM9F,SAAU,QAC9K,cAAC,IAAD,CAAe2E,EAAE,aAAazB,OAAO,UAAUmC,gBAAgB,MAAMM,MAAO,CAAEC,SAAU,SAAUC,MAAO,eAAgBzC,KAAM,UAAW0C,OAAQ,KAAM9F,SAAU,QAClK,cAAC,IAAD,CAAS+F,UAAW,SAAAF,GAAK,OAAI,IAAIG,KAAKC,aAAa,MAAMC,OAAO3D,KAAKC,MAAMqD,aC4E5EwD,EAlFE,WAAO,IAAD,EAEiB1H,mBAAS,IAF1B,mBAEZ2H,EAFY,KAEAC,EAFA,OAGiB5H,mBAAS,SAH1B,mBAGZwH,EAHY,KAGAK,EAHA,OAI2B7H,mBAAS,IAJpC,mBAIZyH,EAJY,KAIKK,EAJL,OAKiB9H,mBAAS,QAL1B,mBAKZ+H,EALY,KAKAC,EALA,OAMyBhI,mBAAS,IANlC,mBAMZiI,EANY,KAMIC,EANJ,OAOWlI,mBAAS,IAPpB,mBAOZ6F,EAPY,KAOHC,EAPG,KASnBzF,qBAAU,WACNC,YAAI6H,GAAW3H,MAAK,SAAA4H,GAChB,IAAIC,EAAKD,EAAOA,EAAOzH,OAAO,GAC1ByF,EAAY7D,OAAOC,KAAK6F,GAAIhH,KAAI,SAAAgF,GAAG,MAAK,CAAEA,MAAKrB,MAAOqD,EAAGhC,OAC7DuB,EAAcxB,GAEd0B,EAAmBM,QAExB,IAEH/H,qBAAU,WACNC,YAAIgI,GAAa9H,MAAK,SAAA+H,GAClBL,EAAkBK,EAAI5B,QAAO,SAAA9B,GAAC,MAAe,WAAXA,EAAEtB,cAEzC,IAEH,IAAIiF,EAAaP,EAAetB,QAAO,SAAA9B,GAAC,OAAIA,EAAE4D,OAASjB,KAAYnG,KAAI,SAAAwD,GAAC,gBAAOA,EAAE+B,KAAT,eAAoB/B,EAAEqB,UAExFW,EAAaC,cACd/C,OAAO4D,EAAWtG,KAAI,SAAAwD,GAAC,OAAIA,EAAEG,UAC7B+B,MAAM,CACH,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGR,OACI,gCACI,oBAAG/I,MAAO,CAACK,SAAU,OAAQQ,WAAY,OAAzC,oBAAwD,+BAAO2J,IAA/D,QAAsF,+BAjD/E,oBAiDP,gBAA4H,+BAAO5H,KAAKC,MAAMkH,KAA9I,+CACA,sBAAKjK,UAAU,cAAf,UACI,sBAAKA,UAAU,iBAAf,UACI,cAAC,gBAAD,CAAekJ,WAAS,GAAGlG,WAAW,eAAeC,iBAAkB,CAAEC,MAAO,KACxEC,MAAO,IAAKjD,MAAO,CAAEiD,MAAO,OAAQC,OAAQ,QADpD,SAEI,cAAC,cAAD,CAAaC,UAvDtB,4DAuDS,SACK,qBAAGC,YACQC,KAAI,SAAAC,GACZ,IAAMW,EAAM0F,EAAWxF,MAAK,SAAAC,GAAC,OAAIA,EAAEiE,MAAQ/E,EAAIgB,MAC/C,OACA,cAAC,YAAD,CAEInB,UAAWG,EACXG,KAAMQ,EAAM4E,EAAW5E,EAAI+C,OAAS,OACpCiC,QAAS,WACLyB,QAAQC,IAAI1G,EAAIoE,IAAKpE,EAAI+C,OACzB6C,EAAc5F,EAAIoE,KAClB2B,EAAc/F,EAAI+C,QAEtBkC,aAAc,WACVpB,EAAW,GAAD,OAAIxE,EAAI6F,WAAWP,KAAnB,qBAAoChG,KAAKC,MAAMoB,EAAI+C,UAEjEoC,aAAc,WACVtB,EAAW,MAZVxE,EAAIQ,gBAoBzB,cAAC,IAAD,CAAcuF,gBAAgB,UAAUC,UAAU,UAAlD,SAA6DzB,OAEpE4B,GAAmB,cAAC,EAAD,CAAaD,WAAYA,EAAYC,gBAAiBA,WClDvEmB,EAtCE,WAAO,IAAD,EAEgB5I,oBAAS,GAFzB,mBAEZ6I,EAFY,KAEAC,EAFA,OAGW9I,oBAAS,GAHpB,mBAGZ+I,EAHY,KAGHC,EAHG,OAIahJ,oBAAS,GAJtB,mBAIZiJ,EAJY,KAIFC,EAJE,KAMnB,OACI,sBAAKpL,UAAU,YAAf,UACI,sBAAKA,UAAU,UAAf,UACI,mBAAGA,UAAU,gBAAb,+BACA,mBAAGA,UAAW+K,EAAa,WAAa,gBACpC5B,QAAS,WACT6B,GAAa,GACbE,GAAW,GACXE,GAAY,IAJhB,sBAKA,mBAAGpL,UAAWiL,EAAU,WAAa,gBACjC9B,QAAS,WACT6B,GAAa,GACbE,GAAW,GACXE,GAAY,IAJhB,oBAKA,mBAAGpL,UAAWmL,EAAW,WAAa,gBAClChC,QAAS,WACT6B,GAAa,GACbE,GAAW,GACXE,GAAY,IAJhB,yBAMJ,gCACI,oBAAIlL,MAAO,CAAEK,SAAU,OAAQQ,WAAY,OAA3C,wEAEIgK,EAAa,cAAC,EAAD,IAAeE,EAAU,cAAC,EAAD,IAAa,cAAC,EAAD,WCAxDI,MAjBf,WACE,OACE,sBAAKrL,UAAU,MAAf,UACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOsL,OAAK,EAACC,KAAK,IAAIC,UAAWV,IACjC,cAAC,IAAD,CAAOS,KAAK,SAASC,UAAWnL,IAChC,cAAC,IAAD,CAAOkL,KAAK,QAAQC,UAAW/J,IAC/B,cAAC,IAAD,CAAO8J,KAAK,mBAAmBC,UAAW9J,IAC1C,cAAC,IAAD,CAAO6J,KAAK,YAAYC,UAAWV,IACnC,cAAC,IAAD,CAAOU,UAAWhK,OAEpB,cAAC,EAAD,QCjBSiK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBjJ,MAAK,YAAkD,IAA/CkJ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.a44f3c0a.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Nav = () => {\n\n    return (\n        <header className=\"App-header\">\n            <Link to=\"/\"><h2 style={{color: \"white\"}}>One Quiet Night</h2></Link>\n            <div className=\"nav-right\">\n                <Link to=\"/forecast\"><p>Forecast</p></Link>\n                <Link to=\"/about\"><p>About</p></Link>\n                <Link to=\"/docs\"><p>Our Model</p></Link>\n                <Link to=\"c3-ai-challenge\"><p>C3 AI COVID-19 Challenge</p></Link>\n            </div>\n        </header>\n\n    );\n}\n\nexport default Nav;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Footer = () => {\n    return (\n        <footer>\n            <Link to=\"/\"><h2>One Quiet Night</h2></Link>\n            <Link to=\"/about\"><p>About</p></Link>\n            <Link to=\"/docs\"><p>Our Model</p></Link>\n            <Link to =\"/contact-us\"><p>Contact Us</p></Link>\n            <p className=\"small-text\">© 2020 One Quiet Night. All Rights Reserved.</p>\n      </footer>\n    );\n}\n\nexport default Footer;","export default __webpack_public_path__ + \"static/media/one-quiet-night-logo.8256d577.jpg\";","export default __webpack_public_path__ + \"static/media/areum-jo.c7558542.jpg\";","export default __webpack_public_path__ + \"static/media/jae-cho.3d22eee1.jpg\";","import React from 'react';\nimport logo from './../Assets/one-quiet-night-logo.jpg';\nimport areum from './../Assets/areum-jo.jpg';\nimport jae from './../Assets/jae-cho.jpg';\n\nimport { FaGithub, FaLinkedin, FaLaptop } from 'react-icons/fa';\n\nconst About = () => {\n    return (\n        <div className=\"container\" style={{ paddingTop: \"30px\"}}>\n            <p className=\"profile-name\" style={{ fontSize: \"30px\"}}>Meet our team <code>One Quiet Night</code></p>\n            <div className=\"vis-wrapper\" style={{ justifyContent: \"center\", maxWidth: \"950px\", margin: \"70px auto\"}}>\n                <div>\n                    <img className=\"logo-img\" src={logo} alt=\"one quiet night logo from pandemic\" />\n                </div>\n                <div className=\"text-height\" style={{ margin: \"0 0 0 30px\", textAlign: \"left\"}}>\n                    <p>We want to build data-driven models to answer these two questions:</p>\n                    <p><span style={{ textAlign: \"left\", fontWeight: \"300\", fontSize: \"24px\" }}>Q. What are the chances that I will get COVID if I go out today?</span></p>\n                    <p><span style={{ textAlign: \"left\", fontWeight: \"300\", fontSize: \"24px\", margin: \"0 0 20px 0\"}}>Q. How dangerous is COVID for someone like me?</span></p>\n                    <p><a className=\"c3-ai-link\" href=\"https://c3.ai/customers/covid-19-data-lake/\" target=\"_blank\" rel=\"noreferrer\">C3 AI COVID-19 Data Lake</a> collects and organizes various data sets that may bear on the spread of COVID-19 -- daily case reports, epidemiology line lists, clinical assets, government and regulatory policies, movement trends, public surveys, weather reports, and economic changes. Our models use this data to make predictions about the spread of COVID-19 infections in different geographic and demographic communities.</p>\n                </div>\n            </div>\n                  \n            <div className=\"about\" style={{marginTop: \"70px\"}}>\n                <div>\n                    <p className=\"profile-name\">Areum Jo, Ph.D.<br/> <span className=\"profile-title\">Data engineer and team lead</span></p>\n                    <img src={areum} className=\"profile\" alt=\"Areum profile\" />\n                    <p className=\"text-height\" style={{maxWidth: \"550px\"}}>Areum creates thoughtful web applications using the newest technologies to help and inspire people. She has worked in a handful of institutes as a neuroscientist to research the brain-imaging methods and the brain-computer interfaces. She is passionate about combining her skills from neuroscience with web UI/UX technologies to solve complex problems at scale. She holds a Ph. D. in neuroscience from SungKyunKwan University, South Korea.</p>\n                    <div className=\"about\">\n                        <a href=\"https://github.com/areumjo\" target=\"_blank\" rel=\"noreferrer\"><FaGithub size={30} color=\"#699FD4\"/> </a>\n                        <a href=\"https://www.linkedin.com/in/areum-jo/\" target=\"_blank\" rel=\"noreferrer\"><FaLinkedin size={30} color=\"#699FD4\"/></a>\n                        <a href=\"https://areumjo.com\" target=\"_blank\" rel=\"noreferrer\"><FaLaptop size={30} color=\"#699FD4\"/></a>\n                    </div>\n                </div>\n                <div>\n                    <p className=\"profile-name\">Jae Cho, Ph.D.<br/> <span className=\"profile-title\">Data scientist</span></p>\n                    <img src={jae} className=\"profile\" alt=\"Jae profile\" />\n                    <p className=\"text-height\" style={{maxWidth: \"550px\"}}>Jae joined Zillow in September 2019 to produce forecasts using mathematical and statistical methods. He builds data-driven models that use economic, demographic, and social data to make predictions about changes in the housing market. The outputs of his models are used to solve business problems inside and outside of Zillow. Prior to Zillow, he has worked in a quantitative hedge fund and in a national lab. He holds a Ph. D. in chemical engineering from Massachusetts Institute of Technology.</p>\n                    <div className=\"about\">\n                        <a href=\"https://github.com/xjhc\" target=\"_blank\" rel=\"noreferrer\"><FaGithub size={30} color=\"#699FD4\"/></a>\n                        <a href=\"https://www.linkedin.com/in/jae-cho/\" target=\"_blank\" rel=\"noreferrer\"><FaLinkedin size={30} color=\"#699FD4\"/></a>\n                        <a href=\"https://www.linkedin.com/in/jae-cho/\" target=\"_blank\" rel=\"noreferrer\"><FaLaptop size={30} color=\"#699FD4\"/></a>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default About;","export default __webpack_public_path__ + \"static/media/notFound404.4ce18fbb.svg\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PageNotFound from '../Assets/notFound404.svg';\n\nconst NotFoundPage = () => {\n    return (\n        <div className=\"container\">\n            <h1>404 NOT FOUND</h1>\n            <img src={PageNotFound} style={{ maxWidth: \"500px\", margin: \"50px 0\"}} />\n            <p>The page we were looking for doesn't exist.</p>\n            <button>\n              <Link to=\"/\" style={{color: \"black\"}}>Go to Home </Link>\n            </button>\n        </div>\n    )\n}\n\nexport default NotFoundPage;","import React from 'react';\n\nconst Docs = () => {\n    return (\n        <div className=\"container\">\n            <h2>Our Forecase Model</h2>\n            <p className=\"text-height\">Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>\n            <h2>Try out your zipcode to see</h2>\n            <p className=\"text-height\">Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>\n        </div>\n    )\n}\n\nexport default Docs;","export default __webpack_public_path__ + \"static/media/c3-ai.41b75a2d.jpg\";","import React from \"react\";\nimport c3ai from \"../Assets/c3-ai.jpg\";\n\nconst C3 = () => {\n    return (\n        <div className=\"container\">\n            <img src={c3ai} alt=\"c3.ai COVID-19 grand challenge\" style={{\"maxWidth\": \"700px\"}} />\n            \n            <div className=\"text-height\" style={{maxWidth: \"700px\", textAlign: \"left\", margin: \"0 auto\" }}><h3 className=\"profile-name\">We are entering <a className=\"c3-ai-link \" href=\"https://c3.ai/c3-ai-covid-19-grand-challenge/get-started/\" target=\"_blank\" rel=\"noreferrer\">C3 AI COVID-19 Challenge.</a></h3>\n                <p className=\"profile-name\">Submission requirements</p>\n                <ul className=\"c3-ul\">✅ Questionnaire (200 words max.)\n                    <li>Briefly describe the broader goals of your project. (40 words)</li>\n                    <li>What specific problem are you trying to solve for this submission? (40 words)</li>\n                    <li>Briefly describe your approach. (60 words)</li>\n                    <li>What makes your project unique? (40 words)</li>\n                    <li>What is the potential impact of your results in the fight against COVID-19? (20 words)</li>\n                </ul>\n                <ul className=\"c3-ul\">✅ Non-Technical Abstract (100 words max.)\n                    <li>A compelling summary of your submission, composed for a general audience.</li>\n                </ul>\n                <ul className=\"c3-ul\">✅ Descriptive Paper (1,000 words max., suggested breakdown below)\n                    <li>Introduction (100 words)</li>\n                    <li>Problem Description (100 words)</li>\n                    <li>Broad Approach (200 words)</li>\n                    <li>Technical Details of Approach (400 words)</li>\n                    <li>Results (100 words)</li>\n                    <li>Impact (100 words)</li>\n                </ul>\n                <ul className=\"c3-ul\">✅ Demo video (60-120 seconds)\n                    <li>A creative expression of the solution, designed to sell it, while explaining: 1) Demo your project and the API’s used to run it. 2) Make sure to explain the problem being solved and walk-through how your solution works. 3)Touch on your results and the potential impact of these results on COVID-19.</li>\n                </ul>\n                <ul className=\"c3-ul\">✅ Source Code (or link to GitHub Repository)\n                    <li>The top 25 solutions will be code-reviewed to assure quality​.</li>\n                </ul>\n                <ul className=\"c3-ul\">✅ List of Data Sources Used:\n                    <li>At least two datasets used must be from the C3.ai COVID-19 Data Lake.</li>\n                    <li>All datasets must be open-access and links to any external datasets must be provided.</li>\n                </ul>\n            </div>\n        </div>\n    )\n}\n\nexport default C3;","export default __webpack_public_path__ + \"static/media/JHU_IncidentCases_Country.6726039b.csv\";","import React, { useState, useEffect } from \"react\";\nimport { ComposableMap, Geographies, Geography, Marker, Annotation } from \"react-simple-maps\"\nimport { geoCentroid } from \"d3-geo\";\n\nimport { csv } from \"d3-fetch\";\nimport csvNation from \"../Data/Country/JHU_IncidentCases_Country.csv\"\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, ReferenceLine } from 'recharts';\n\nimport allStates from \"../Maps/allstates.json\";\n\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\n\nconst offsets = {\n    DC: [30, 25]\n};\nconst latestDate = 'October 31 2020';\n\nconst formatXAxis = (tickItem) => {\n    return tickItem.toString();\n}\n\nconst National = () => {\n\n    const [nationalData, setNationlData] = useState([]);\n    const [nationalCase, setNationalCase] = useState(\"\");\n\n    useEffect(() => {\n        csv(csvNation).then(nat => {\n            setNationlData(nat);\n            let latest = nat[nat.length-1];\n            setNationalCase(latest[\"US\"]);\n        })\n    }, []);\n\n    return (\n        <div>\n            <p style={{fontSize: \"20px\", fontWeight: \"300\"}}>In the <code>U.S.</code>, on <code>{latestDate}</code>, there were <code>{Math.round(nationalCase)}</code> reported COVID-19 cases per 100K people.</p>\n            <div className=\"vis-wrapper\">\n                <div className=\"forecast usmap\" >\n                    <ComposableMap projection=\"geoAlbersUsa\" \n                    projectionConfig={{ scale: 800 }} \n                    width={900}\n                    style={{ width: \"100%\", height: \"auto\" }}>\n                        <Geographies geography={geoUrl}>\n                            {({ geographies }) => (\n                            <>\n                                {geographies.map(geo => (\n                                <Geography\n                                    key={geo.rsmKey}\n                                    stroke=\"#FFF\"\n                                    geography={geo}\n                                    style={{\n                                            default: {\n                                                fill: \"#DDD\",\n                                                stroke: \"#FFF\",\n                                                strokeWidth: 1,\n                                                outline: \"none\",},\n                                            hover: {\n                                                fill: \"#F5A51C\",\n                                                stroke: \"#FFF\",\n                                                strokeWidth: 1,\n                                                outline: \"none\",},\n                                            pressed: {\n                                                fill: \"#EE3E23\",\n                                                stroke: \"#EE3E23\",\n                                                outline: \"none\",}}}/>\n                                ))}\n                                {geographies.map(geo => {\n                                const centroid = geoCentroid(geo);\n                                const cur = allStates.find(s => s.val === geo.id);\n                                return (\n                                    <g key={geo.rsmKey + \"-name\"}>\n                                    {cur &&\n                                        centroid[0] > -160 &&\n                                        centroid[0] < -67 &&\n                                        (Object.keys(offsets).indexOf(cur.id) === -1 ? (\n                                        <Marker coordinates={centroid}>\n                                            <text y=\"3\" fontSize={12} textAnchor=\"middle\">{cur.id}</text>\n                                        </Marker>\n                                        ) : (\n                                        <Annotation subject={centroid} dx={offsets[cur.id][0]} dy={offsets[cur.id][1]}>\n                                            <text x={2} fontSize={12} alignmentBaseline=\"middle\">{cur.id}</text>\n                                        </Annotation>\n                                        ))}\n                                    </g>\n                                );\n                                })}\n                            </>\n                            )}\n                        </Geographies>\n                    </ComposableMap>\n                </div>\n                \n            { nationalData && \n            <div className=\"forecast\">\n                <LineChart width={600} height={400} data={nationalData} margin={{ top: 10, right: 40, bottom: 40, left: 5 }}>\n                    <Line type=\"monotone\" dataKey=\"US\" stroke=\"#043b4e\" strokeWidth={4} dot={false} />\n                    {/* <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" /> */}\n                    <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" vertical={false} />\n                    <XAxis dataKey=\"dates\" fontSize=\"10\" axisLine={false} tickLine={false} tickFormatter={formatXAxis} />\n                    <YAxis fontSize=\"10\" axisLine={false} tickLine={false} domain={[0, 200]}/>\n                    <ReferenceLine x=\"2020-01-25\" stroke=\"#EE3E23\" strokeDasharray=\"4 4\" label={{ position: \"bottom\", value: \"First case in US\", fontSize: \"12\", fill:\"#EE3E23\", offset: 20 }} />\n                    <ReferenceLine x=\"2020-03-14\" stroke=\"#4A72B7\" strokeDasharray=\"4 4\" label={{ position: 'insideTopLeft',  value: 'National emergency declare', fill: '#4A72B7', fontSize: \"12\" }} />\n                    <ReferenceLine x=\"2020-03-28\" stroke=\"#809f3d\" strokeDasharray=\"4 4\" label={{ position: \"bottom\", value: \"CARES act enacted\", fill: \"#809f3d\", offset: 30, fontSize: \"12\" }} />          \n                    <ReferenceLine x=\"2020-04-18\" stroke=\"#F48620\" strokeDasharray=\"4 4\" label={{ position: 'bottom', value: \"Stimulus payments starts\", fill: \"#F48620\", offset: 45, fontSize: \"12\" }} />\n                    <ReferenceLine x=\"2020-10-31\" stroke=\"#368243\" strokeDasharray=\"4 4\" label={{ position: \"bottom\", value: \"Election day\", fill: \"#368243\", offset: 20, fontSize: \"12\" }} />\n                    <Tooltip formatter={value => new Intl.NumberFormat('en').format(Math.round(value))}/>\n                </LineChart>\n            </div>\n            }\n            </div>\n        </div>\n    )\n}\n\nexport default National;","export default __webpack_public_path__ + \"static/media/JHU_CumulativeCases_State.7ca3e20a.csv\";","import React from \"react\";\n\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, ReferenceLine, ReferenceArea } from 'recharts';\n\nconst StatesChart = ( props ) => {\n    let { onStateId, allStatesData } = props;\n\n    let plotData = allStatesData.map(function(d) {\n        return { date: d.dates, cases: d[onStateId] };\n    })\n    \n    return (\n        <div className=\"forecast\">\n            <LineChart width={600} height={400} data={plotData} margin={{ top: 10, right: 40, bottom: 40, left: 5 }}>\n                <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" vertical={false} />\n                <XAxis dataKey=\"date\" fontSize=\"10\" axisLine={false} tickLine={false}  />\n                <YAxis fontSize=\"10\" axisLine={false} tickLine={false} domain={[0, 4000]}/>\n                <ReferenceLine x=\"2020-01-25\" stroke=\"#EE3E23\" strokeDasharray=\"4 4\" label={{ position: \"bottom\", value: \"First case in US\", fontSize: \"12\", fill:\"#EE3E23\", offset: 20  }} />\n                <ReferenceLine x=\"2020-03-14\" stroke=\"#4A72B7\" strokeDasharray=\"4 4\" label={{ position: 'insideTopLeft',  value: 'National emergency declare', fill: '#4A72B7', fontSize: \"12\" }} />\n                <ReferenceLine x=\"2020-03-28\" stroke=\"#809f3d\" strokeDasharray=\"4 4\" label={{ position: \"bottom\", value: \"CARES act enacted\", fill: \"#809f3d\", offset: 30, fontSize: \"12\" }} />          \n                <ReferenceLine x=\"2020-04-18\" stroke=\"#F48620\" strokeDasharray=\"4 4\" label={{ position: 'bottom', value: \"Stimulus payments starts\", fill: \"#F48620\", offset: 45, fontSize: \"12\" }} />\n                <ReferenceLine x=\"2020-10-31\" stroke=\"#368243\" strokeDasharray=\"4 4\" label={{ position: \"bottom\", value: \"Election day\", fill: \"#368243\", offset: 20, fontSize: \"12\" }} />\n                <ReferenceArea x1=\"2020-10-31\" x2=\"2020-11-07\" y1={0} stroke=\"red\" strokeOpacity={0.3} label={{ value: \"Forecast\", fontSize: \"12\", position: \"insideRight\" }}/>\n                <Line type=\"monotone\" dataKey=\"cases\" stroke=\"#043b4e\" strokeWidth={4} dot={false} />\n                <Tooltip formatter={value => new Intl.NumberFormat('en').format(Math.round(value))}/>\n            </LineChart>\n        </div>\n\n    )\n}\n\nexport default StatesChart;","import React, { useState, useEffect } from \"react\";\nimport { ComposableMap, Geographies, Geography, Marker, Annotation } from \"react-simple-maps\"\nimport { geoCentroid } from \"d3-geo\";\nimport ReactTooltip from \"react-tooltip\";\n\nimport { csv } from \"d3-fetch\";\nimport csvState from \"../Data/State/JHU_CumulativeCases_State.csv\";\n// I updated the JHU_CumulativeCases by adding last row from the OQN_CumulativeCasesForecast!!\nimport allStates from \"../Maps/allstates.json\";\n\nimport { scaleQuantile } from \"d3-scale\";\nimport StatesChart from \"./StatesChart\";\n\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\n\nconst offsets = {\n    DC: [30, 25]\n};\n\nconst latestDate = 'October 31 2020';\n\nconst States = () => {\n\n    const [stateData, setStateData] = useState([]); // for mapping\n    const [onStateId, setOnStateId] = useState(\"53\"); // for initializing WA data\n    const [allStatesData, setAllStatesData] = useState([]); \n    const [stateCase, setStateCase] = useState(\"1411\"); // for WA cumulative case data\n    const [error, setError] = useState('');\n    const [tooltip, setTooltip] = useState('');\n    const [forecast, setForecast] = useState('');\n\n\n    useEffect(() => {\n        let isSubscribed = true;\n        csv(csvState).then(state => {\n            if (isSubscribed) {\n                let st = state[state.length-2];\n                let converted = Object.keys(st).map(key => ({ key, cases: st[key]}))\n                let forecastSt = state[state.length-1];\n                let forecastCov = Object.keys(forecastSt).map(key => ({ key, cases: st[key]}));\n                setStateData(converted);\n                setAllStatesData(state);\n                setForecast(forecastCov);\n            } \n        })\n        .catch(error => (isSubscribed ? setError(error.toString()) : null));\n        return () => isSubscribed = false;\n    }, []);\n\n    const stateInfo = allStates.filter(d => d.val === onStateId).map(d => d.name);\n\n    const colorScale = scaleQuantile()\n        .domain(stateData.map(d => d.cases))\n        .range([\n            \"#ffedea\",\n            \"#ffcec5\",\n            \"#ffad9f\",\n            \"#ff8a75\",\n            \"#ff5533\",\n            \"#e2492d\",\n            \"#be3d26\",\n            \"#9a311f\",\n            \"#782618\"\n    ]);\n\n    // for mapping the current cases : fetch only the last element from the csv data and map\n    // for chart : filter out with the state fips id and plot\n    return (\n        <div>\n            <p style={{fontSize: \"20px\", fontWeight: \"300\"}}>In <code>{stateInfo}</code> state, on <code>{latestDate}</code>, there were <code>{Math.round(stateCase)}</code> reported COVID-19 cases per 100K people.</p>\n            <div className=\"vis-wrapper\">\n                    <div className=\"forecast usmap\" >\n                    <ComposableMap data-tip=\"\" projection=\"geoAlbersUsa\" \n                    projectionConfig={{ scale: 800 }} \n                    width={900}\n                    style={{ width: \"100%\", height: \"auto\" }}>\n                        <Geographies geography={geoUrl}>\n                            {({ geographies }) => (\n                            <>\n                                { geographies.map(geo => {\n                                    const cur = stateData.find(s => s.key === geo.id);\n                                    return (\n                                        <Geography\n                                        key={geo.rsmKey}\n                                        geography={geo}\n                                        fill={cur ? colorScale(cur.cases) : \"#EEE\"}\n                                        stroke=\"#fff\"\n                                        style={{\n                                            hover: {\n                                                stroke: \"#782618\",\n                                                strokeWidth: 2, \n                                            }\n                                        }}\n                                        onClick={() => {\n                                            setOnStateId(cur.key);\n                                            setStateCase(cur.cases);\n                                        }}\n                                        onMouseEnter={() => {\n                                            setTooltip(`${geo.properties.name}: ${Math.round(cur.cases)}`);\n                                        }}\n                                        onMouseLeave={() => {\n                                            setTooltip(\"\");\n                                        }}\n                                    />                                    \n                                    );\n                                })}\n                                {geographies.map(geo => {\n                                const centroid = geoCentroid(geo);\n                                const cur = allStates.find(s => s.val === geo.id);\n                                return (\n                                    <g key={geo.rsmKey + \"-name\"}>\n                                    {cur &&\n                                        centroid[0] > -160 &&\n                                        centroid[0] < -67 &&\n                                        (Object.keys(offsets).indexOf(cur.id) === -1 ? (\n                                        <Marker coordinates={centroid}>\n                                            <text y=\"3\" fontSize={12} textAnchor=\"middle\">{cur.id}</text>\n                                        </Marker>\n                                        ) : (\n                                        <Annotation subject={centroid} dx={offsets[cur.id][0]} dy={offsets[cur.id][1]}>\n                                            <text x={2} fontSize={12} alignmentBaseline=\"middle\">{cur.id}</text>\n                                        </Annotation>\n                                        ))}\n                                    </g>\n                                );\n                                })}\n                            </>\n                            )}\n                        </Geographies>\n                    </ComposableMap>\n                    <ReactTooltip backgroundColor=\"#b3b3b3\" textColor=\"#1a1a1a\">{tooltip}</ReactTooltip>\n                </div>\n            {allStatesData && <StatesChart onStateId={onStateId} allStatesData={allStatesData} stateCase={stateCase}/> }\n            </div>\n            </div>\n            \n    )\n}\n\nexport default States;","export default __webpack_public_path__ + \"static/media/JHU_CumulativeCases_County.b8292766.csv\";","export default __webpack_public_path__ + \"static/media/locations_information.63e7395a.csv\";","import React from \"react\";\n\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, ReferenceLine } from 'recharts';\n\nconst CountyChart = ( props ) => {\n    let { onCountyId, allCountiesData } = props;\n\n    let plotData = allCountiesData.map(function(d) {\n        return { date: d.dates, cases: d[onCountyId] };\n    })\n    \n    return (\n        <div className=\"forecast\">\n            <LineChart width={600} height={400} data={plotData} margin={{ top: 10, right: 40, bottom: 40, left: 5 }}>\n                <Line type=\"monotone\" dataKey=\"cases\" stroke=\"#043b4e\" strokeWidth={4} dot={false} />\n                <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" vertical={false} />\n                <XAxis dataKey=\"date\" fontSize=\"10\" axisLine={false} tickLine={false}  />\n                <YAxis fontSize=\"10\" axisLine={false} tickLine={false} domain={[0, 4000]}/>\n                <ReferenceLine x=\"2020-01-25\" stroke=\"#EE3E23\" strokeDasharray=\"4 4\" label={{ position: \"bottom\", value: \"First case in US\", fontSize: \"12\", fill:\"#EE3E23\", offset: \"20\"  }} />\n                <ReferenceLine x=\"2020-03-14\" stroke=\"#4A72B7\" strokeDasharray=\"4 4\" label={{ position: 'insideTopLeft',  value: 'National emergency declare', fill: '#4A72B7', fontSize: \"12\" }} />\n                <ReferenceLine x=\"2020-03-28\" stroke=\"#809f3d\" strokeDasharray=\"4 4\" label={{ position: \"bottom\", value: \"CARES act enacted\", fill: \"#809f3d\", offset: \"30\", fontSize: \"12\" }} />          \n                <ReferenceLine x=\"2020-04-18\" stroke=\"#F48620\" strokeDasharray=\"4 4\" label={{ position: 'bottom', value: \"Stimulus payments starts\", fill: \"#F48620\", offset: \"45\", fontSize: \"12\" }} />\n                <ReferenceLine x=\"2020-10-31\" stroke=\"#368243\" strokeDasharray=\"4 4\" label={{ position: \"bottom\", value: \"Election day\", fill: \"#368243\", offset: \"20\", fontSize: \"12\" }} />\n                <Tooltip formatter={value => new Intl.NumberFormat('en').format(Math.round(value))}/>\n            </LineChart>\n        </div>\n\n    )\n}\n\nexport default CountyChart;","import React, { useState, useEffect } from \"react\";\nimport { ComposableMap, Geographies, Geography, Marker, Annotation } from \"react-simple-maps\"\n\nimport { csv } from \"d3-fetch\";\nimport csvCounty from \"../Data/County/JHU_CumulativeCases_County.csv\";\nimport csvLocation from \"../Data/locations_information.csv\";\nimport { scaleQuantile } from \"d3-scale\";\nimport CountyChart from \"./CountyChart\";\nimport ReactTooltip from \"react-tooltip\";\n\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/counties-10m.json\";\nconst latestDate = 'October 31 2020';\n\n// const location = csv(csvLocation).then(loc => {\n//     let countyLoc = loc.filter(d => d.type === \"county\");\n    \n// })\nconst Counties = () => {\n\n    const [countyData, setCountyData] = useState([]); // for mapping\n    const [onCountyId, setOnCountyId] = useState(\"53033\"); // initialize king county data\n    const [allCountiesData, setAllCountiesData] = useState([]);\n    const [countyCase, setCountyCase] = useState(\"1231\");\n    const [countyLocation, setCountyLocation] = useState([]); \n    const [tooltip, setTooltip] = useState('');\n\n    useEffect(() => {\n        csv(csvCounty).then(county => {\n            let co = county[county.length-1];\n            let converted = Object.keys(co).map(key => ({ key, cases: co[key]}));\n            setCountyData(converted);\n            // console.log(countyData) -- {key: \"10001\", cases: \"1974.1572909406702\"}\n            setAllCountiesData(county);\n        })\n    }, []);\n\n    useEffect(() => {\n        csv(csvLocation).then(loc => {\n            setCountyLocation(loc.filter(d => d.type === \"county\"));\n        })\n    }, []);\n\n    let countyName = countyLocation.filter(d => d.fips === onCountyId).map(d => `${d.name} in ${d.state}`);\n\n    const colorScale = scaleQuantile()\n        .domain(countyData.map(d => d.cases))\n        .range([\n            \"#ffedea\",\n            \"#ffcec5\",\n            \"#ffad9f\",\n            \"#ff8a75\",\n            \"#ff5533\",\n            \"#e2492d\",\n            \"#be3d26\",\n            \"#9a311f\",\n            \"#782618\"\n        ]);\n\n    return (\n        <div>\n            <p style={{fontSize: \"20px\", fontWeight: \"300\"}}>In the <code>{countyName}</code>, on <code>{latestDate}</code>, there were <code>{Math.round(countyCase)}</code> reported COVID-19 cases per 100K people.</p>\n            <div className=\"vis-wrapper\">\n                <div className=\"forecast usmap\" >\n                    <ComposableMap data-tip=\"\" projection=\"geoAlbersUsa\" projectionConfig={{ scale: 800 }} \n                            width={900} style={{ width: \"100%\", height: \"auto\" }}>\n                        <Geographies geography={geoUrl}>\n                            {({ geographies }) =>\n                            geographies.map(geo => {\n                                const cur = countyData.find(s => s.key === geo.id);\n                                return (\n                                <Geography\n                                    key={geo.rsmKey}\n                                    geography={geo}\n                                    fill={cur ? colorScale(cur.cases) : \"#EEE\"}\n                                    onClick={() => {\n                                        console.log(cur.key, cur.cases);\n                                        setOnCountyId(cur.key);\n                                        setCountyCase(cur.cases);\n                                    }}\n                                    onMouseEnter={() => {\n                                        setTooltip(`${geo.properties.name} county : ${Math.round(cur.cases)}`);\n                                    }}\n                                    onMouseLeave={() => {\n                                        setTooltip(\"\");\n                                    }}\n                                />\n                                );\n                            })\n                            }\n                        </Geographies>\n                    </ComposableMap>\n                    <ReactTooltip backgroundColor=\"#b3b3b3\" textColor=\"#1a1a1a\">{tooltip}</ReactTooltip>\n                </div>\n            {allCountiesData && <CountyChart onCountyId={onCountyId} allCountiesData={allCountiesData} /> }\n        </div>\n    </div>\n    )\n}\n\nexport default Counties;","import React, { useState, useEffect } from \"react\";\nimport National from \"../Components/National\";\nimport States from \"./States\";\nimport Counties from \"./Counties\";\n\nconst Forecast = () => {\n\n    const [isNational, setIsNationl] = useState(true);\n    const [isState, setIsState] = useState(false);\n    const [isCounty, setIsCounty] = useState(false);\n\n    return (\n        <div className=\"container\">\n            <div className=\"options\">\n                <p className=\"option-button\">Choose your view:</p>\n                <p className={isNational ? \"selected\" : \"option-button\"}\n                    onClick={()=>{\n                    setIsNationl(true)\n                    setIsState(false)\n                    setIsCounty(false)} }>National</p>\n                <p className={isState ? \"selected\" : \"option-button\"}\n                    onClick={()=> {\n                    setIsNationl(false);\n                    setIsState(true)\n                    setIsCounty(false)}} >States</p>\n                <p className={isCounty ? \"selected\" : \"option-button\"}\n                    onClick={()=> {\n                    setIsNationl(false);\n                    setIsState(false)\n                    setIsCounty(true)}} >Counties</p>\n            </div>\n            <div>\n                <h3 style={{ fontSize: \"25px\", fontWeight: \"300\"}}>Daily reported COVID-19 new cases per 100,000 people in US</h3>\n                {\n                    isNational ? <National /> : isState ? <States /> : <Counties />\n                }\n\n            </div>\n\n        </div>\n    )\n}\n\nexport default Forecast;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport './App.css';\n\nimport Nav from './Components/Nav';\n// import Home from './Components/Home';\nimport Footer from './Components/Footer';\n\nimport About from './Components/About';\nimport PageNotFound from './Components/PageNotFound';\nimport Docs from './Components/Docs';\nimport C3 from './Components/C3';\n\nimport Forecast from './Components/Forecast';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Switch>\n        <Route exact path=\"/\" component={Forecast} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/docs\" component={Docs} />\n        <Route path=\"/c3-ai-challenge\" component={C3} />\n        <Route path=\"/forecast\" component={Forecast} />\n        <Route component={PageNotFound} />\n      </Switch>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}