{"version":3,"sources":["Components/Nav.js","Components/Footer.js","Assets/one-quiet-night-logo.jpg","Assets/areum-jo.jpg","Assets/jae-cho.jpg","Components/About.js","Assets/notFound404.svg","Components/PageNotFound.js","Assets/c3-ai.jpg","Components/C3.js","Data/Country/JHU_IncidentCases_Country.csv","Components/National.js","Data/State/JHU_CumulativeCases_State.csv","Components/CustomChartTooltip.js","Components/StatesChart.js","Components/States.js","Data/County/JHU_CumulativeCases_County.csv","Data/locations_information.csv","Components/CountyChart.js","Components/Counties.js","Components/Forecast.js","Components/Model.js","App.js","reportWebVitals.js","index.js"],"names":["Nav","className","to","style","color","Footer","About","paddingTop","fontSize","justifyContent","maxWidth","margin","src","logo","alt","textAlign","href","target","rel","marginTop","areum","size","jae","NotFoundPage","PageNotFound","C3","c3ai","offsets","DC","formatXAxis","tickItem","toString","National","useState","nationalData","setNationlData","nationalCase","setNationalCase","useEffect","csv","csvNation","then","nat","latest","length","fontWeight","Math","round","projection","projectionConfig","scale","width","height","geography","geographies","map","geo","stroke","default","fill","strokeWidth","outline","hover","pressed","rsmKey","centroid","geoCentroid","cur","allStates","find","s","val","id","Object","keys","indexOf","coordinates","y","textAnchor","subject","dx","dy","x","alignmentBaseline","data","top","right","bottom","left","type","dataKey","dot","strokeDasharray","vertical","axisLine","tickLine","tickFormatter","domain","label","position","value","offset","formatter","CustomChartTooltip","active","payload","floor","StatesChart","props","onStateId","allStatesData","yMax","plotData","d","date","dates","cases","yDomain","ceil","x1","x2","y1","strokeOpacity","content","States","stateData","setStateData","setOnStateId","setAllStatesData","stateCase","setStateCase","setError","tooltip","setTooltip","setForecast","setYMax","isSubscribed","csvState","state","st","converted","key","forecastSt","forecastCov","catch","error","stateInfo","filter","name","colorScale","scaleQuantile","range","data-tip","onClick","onMouseEnter","properties","onMouseLeave","backgroundColor","textColor","CountyChart","onCountyId","allCountiesData","Intl","NumberFormat","format","Counties","countyData","setCountyData","setOnCountyId","setAllCountiesData","countyCase","setCountyCase","countyLocation","setCountyLocation","csvCounty","county","co","csvLocation","loc","countyName","fips","console","log","Forecast","isNational","setIsNationl","isState","setIsState","isCounty","setIsCounty","cursor","Model","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ffc8d978.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Nav = () => {\n\n    return (\n        <header className=\"App-header\">\n            <Link to=\"/\"><h2 style={{color: \"white\"}}>One Quiet Night</h2></Link>\n            <div className=\"nav-right\">\n                <Link to=\"/forecast\"><p>Forecast</p></Link>\n                <Link to=\"/about\"><p>About</p></Link>\n                <Link to=\"/docs\"><p>Our Model</p></Link>\n                <Link to=\"c3-ai-challenge\"><p>C3 AI COVID-19 Challenge</p></Link>\n            </div>\n        </header>\n\n    );\n}\n\nexport default Nav;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Footer = () => {\n    return (\n        <footer>\n            <Link to=\"/\"><h2>One Quiet Night</h2></Link>\n            <Link to=\"/about\"><p>About</p></Link>\n            <Link to=\"/model\"><p>Our Model</p></Link>\n            <Link to =\"/contact-us\"><p>Contact Us</p></Link>\n            <p className=\"small-text\">© 2020 One Quiet Night. All Rights Reserved.</p>\n      </footer>\n    );\n}\n\nexport default Footer;","export default __webpack_public_path__ + \"static/media/one-quiet-night-logo.8256d577.jpg\";","export default __webpack_public_path__ + \"static/media/areum-jo.c7558542.jpg\";","export default __webpack_public_path__ + \"static/media/jae-cho.3d22eee1.jpg\";","import React from 'react';\nimport logo from './../Assets/one-quiet-night-logo.jpg';\nimport areum from './../Assets/areum-jo.jpg';\nimport jae from './../Assets/jae-cho.jpg';\n\nimport { FaGithub, FaLinkedin, FaLaptop } from 'react-icons/fa';\n\nconst About = () => {\n    return (\n        <div className=\"container\" style={{ paddingTop: \"30px\"}}>\n            <p className=\"profile-name\" style={{ fontSize: \"30px\"}}>Meet our team</p>\n            <p className=\"profile-name\"><code>One Quiet Night</code></p>\n            <div className=\"vis-wrapper\" style={{ justifyContent: \"center\", maxWidth: \"800px\", margin: \"70px auto\"}}>\n                <div>\n                    <img className=\"logo-img\" src={logo} alt=\"one quiet night logo from pandemic\" />\n                </div>\n                <div className=\"text-height\" style={{ margin: \"0 0 0 30px\", textAlign: \"left\"}}>\n                    <p>We want to build data-driven models to to forecast potential outbreaks and on understanding its driving forces.</p>\n                    <p><a className=\"c3-ai-link\" href=\"https://c3.ai/customers/covid-19-data-lake/\" target=\"_blank\" rel=\"noreferrer\">C3 AI COVID-19 Data Lake</a> collects and organizes various data sets that may bear on the spread of COVID-19 -- daily case reports, epidemiology line lists, clinical assets, government and regulatory policies, movement trends, public surveys, weather reports, and economic changes. Our models use this data to make predictions about the spread of COVID-19 infections in different geographic and demographic communities.</p>\n                </div>\n            </div>\n                  \n            <div className=\"about\" style={{marginTop: \"70px\"}}>\n                <div>\n                    <p className=\"profile-name\">Areum Jo, Ph.D.<br/> <span className=\"profile-title\">Data engineer and team lead</span></p>\n                    <img src={areum} className=\"profile\" alt=\"Areum profile\" />\n                    <p className=\"text-height\" style={{maxWidth: \"550px\"}}>Areum creates thoughtful web applications using the newest technologies to help and inspire people. She has worked in a handful of institutes as a neuroscientist to research the brain-imaging methods and the brain-computer interfaces. She is passionate about combining her skills from neuroscience with web UI/UX technologies to solve complex problems at scale. She holds a Ph. D. in neuroscience from SungKyunKwan University, South Korea.</p>\n                    <div className=\"about\">\n                        <a href=\"https://github.com/areumjo\" target=\"_blank\" rel=\"noreferrer\"><FaGithub size={30} color=\"#699FD4\"/> </a>\n                        <a href=\"https://www.linkedin.com/in/areum-jo/\" target=\"_blank\" rel=\"noreferrer\"><FaLinkedin size={30} color=\"#699FD4\"/></a>\n                        <a href=\"https://areumjo.com\" target=\"_blank\" rel=\"noreferrer\"><FaLaptop size={30} color=\"#699FD4\"/></a>\n                    </div>\n                </div>\n                <div>\n                    <p className=\"profile-name\">Jae Cho, Ph.D.<br/> <span className=\"profile-title\">Data scientist</span></p>\n                    <img src={jae} className=\"profile\" alt=\"Jae profile\" />\n                    <p className=\"text-height\" style={{maxWidth: \"550px\"}}>Jae joined Zillow in September 2019 to produce forecasts using mathematical and statistical methods. He builds data-driven models that use economic, demographic, and social data to make predictions about changes in the housing market. The outputs of his models are used to solve business problems inside and outside of Zillow. Prior to Zillow, he has worked in a quantitative hedge fund and in a national lab. He holds a Ph. D. in chemical engineering from Massachusetts Institute of Technology.</p>\n                    <div className=\"about\">\n                        <a href=\"https://github.com/xjhc\" target=\"_blank\" rel=\"noreferrer\"><FaGithub size={30} color=\"#699FD4\"/></a>\n                        <a href=\"https://www.linkedin.com/in/jae-cho/\" target=\"_blank\" rel=\"noreferrer\"><FaLinkedin size={30} color=\"#699FD4\"/></a>\n                        <a href=\"https://www.linkedin.com/in/jae-cho/\" target=\"_blank\" rel=\"noreferrer\"><FaLaptop size={30} color=\"#699FD4\"/></a>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default About;","export default __webpack_public_path__ + \"static/media/notFound404.4ce18fbb.svg\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PageNotFound from '../Assets/notFound404.svg';\n\nconst NotFoundPage = () => {\n    return (\n        <div className=\"container\">\n            <h1>404 NOT FOUND</h1>\n            <img src={PageNotFound} alt=\"page not found\"style={{ maxWidth: \"500px\", margin: \"50px 0\"}} />\n            <p>The page we were looking for doesn't exist.</p>\n            <button>\n              <Link to=\"/\" style={{color: \"black\"}}>Go to Home </Link>\n            </button>\n        </div>\n    )\n}\n\nexport default NotFoundPage;","export default __webpack_public_path__ + \"static/media/c3-ai.41b75a2d.jpg\";","import React from \"react\";\nimport c3ai from \"../Assets/c3-ai.jpg\";\n\nconst C3 = () => {\n    return (\n        <div className=\"container\">\n            <img src={c3ai} alt=\"c3.ai COVID-19 grand challenge\" style={{\"maxWidth\": \"700px\"}} />\n            \n            <div className=\"text-height\" style={{maxWidth: \"700px\", textAlign: \"left\", margin: \"0 auto\" }}><h3 className=\"profile-name\">We are entering <a className=\"c3-ai-link \" href=\"https://c3.ai/c3-ai-covid-19-grand-challenge/get-started/\" target=\"_blank\" rel=\"noreferrer\">C3 AI COVID-19 Challenge.</a></h3>\n                <p className=\"profile-name\">Submission requirements</p>\n                <ul className=\"c3-ul\">✅ Questionnaire (200 words max.)\n                    <li>Briefly describe the broader goals of your project. (40 words)</li>\n                    <li>What specific problem are you trying to solve for this submission? (40 words)</li>\n                    <li>Briefly describe your approach. (60 words)</li>\n                    <li>What makes your project unique? (40 words)</li>\n                    <li>What is the potential impact of your results in the fight against COVID-19? (20 words)</li>\n                </ul>\n                <ul className=\"c3-ul\">✅ Non-Technical Abstract (100 words max.)\n                    <li>A compelling summary of your submission, composed for a general audience.</li>\n                </ul>\n                <ul className=\"c3-ul\">✅ Descriptive Paper (1,000 words max., suggested breakdown below)\n                    <li>Introduction (100 words)</li>\n                    <li>Problem Description (100 words)</li>\n                    <li>Broad Approach (200 words)</li>\n                    <li>Technical Details of Approach (400 words)</li>\n                    <li>Results (100 words)</li>\n                    <li>Impact (100 words)</li>\n                </ul>\n                <ul className=\"c3-ul\">✅ Demo video (60-120 seconds)\n                    <li>A creative expression of the solution, designed to sell it, while explaining: 1) Demo your project and the API’s used to run it. 2) Make sure to explain the problem being solved and walk-through how your solution works. 3)Touch on your results and the potential impact of these results on COVID-19.</li>\n                </ul>\n                <ul className=\"c3-ul\">✅ Source Code (or link to GitHub Repository)\n                    <li>The top 25 solutions will be code-reviewed to assure quality​.</li>\n                </ul>\n                <ul className=\"c3-ul\">✅ List of Data Sources Used:\n                    <li>At least two datasets used must be from the C3.ai COVID-19 Data Lake.</li>\n                    <li>All datasets must be open-access and links to any external datasets must be provided.</li>\n                </ul>\n            </div>\n        </div>\n    )\n}\n\nexport default C3;","export default __webpack_public_path__ + \"static/media/JHU_IncidentCases_Country.6726039b.csv\";","import React, { useState, useEffect } from \"react\";\nimport { ComposableMap, Geographies, Geography, Marker, Annotation } from \"react-simple-maps\"\nimport { geoCentroid } from \"d3-geo\";\n\nimport { csv } from \"d3-fetch\";\nimport csvNation from \"../Data/Country/JHU_IncidentCases_Country.csv\"\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, ReferenceLine } from 'recharts';\n\nimport allStates from \"../Maps/allstates.json\";\n\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\n\nconst offsets = {\n    DC: [30, 25]\n};\nconst latestDate = 'October 31 2020';\n\nconst DataFormater = (number) => {\n    if (number > 1000000000){\n      return (number/1000000000).toString() + 'B';\n    } else if(number > 1000000){\n      return (number/1000000).toString() + 'M';\n    } else if(number > 1000){\n      return (number/1000).toString() + 'K';\n    } else{\n      return number.toString();\n    } \n}\n// <YAxis tickFormatter={DataFormatter}\n\nconst formatXAxis = (tickItem) => {\n    return tickItem.toString();\n}\n\nconst National = () => {\n\n    const [nationalData, setNationlData] = useState([]);\n    const [nationalCase, setNationalCase] = useState(\"\");\n\n    useEffect(() => {\n        csv(csvNation).then(nat => {\n            setNationlData(nat);\n            let latest = nat[nat.length-1];\n            setNationalCase(latest[\"US\"]);\n        })\n    }, []);\n\n    return (\n        <div>\n            <p style={{fontSize: \"20px\", fontWeight: \"300\"}}>In the <code>U.S.</code>, on <code>{latestDate}</code>, there were <code>{Math.round(nationalCase)}</code> reported COVID-19 cases per 100K people.</p>\n            <div className=\"vis-wrapper\">\n                <div className=\"forecast usmap\" >\n                    <ComposableMap projection=\"geoAlbersUsa\" \n                    projectionConfig={{ scale: 800 }} \n                    width={900}\n                    style={{ width: \"100%\", height: \"auto\" }}>\n                        <Geographies geography={geoUrl}>\n                            {({ geographies }) => (\n                            <>\n                                {geographies.map(geo => (\n                                <Geography\n                                    key={geo.rsmKey}\n                                    stroke=\"#FFF\"\n                                    geography={geo}\n                                    style={{\n                                            default: {\n                                                fill: \"#DDD\",\n                                                stroke: \"#FFF\",\n                                                strokeWidth: 1,\n                                                outline: \"none\",},\n                                            hover: {\n                                                fill: \"#F5A51C\",\n                                                stroke: \"#FFF\",\n                                                strokeWidth: 1,\n                                                outline: \"none\",},\n                                            pressed: {\n                                                fill: \"#EE3E23\",\n                                                stroke: \"#EE3E23\",\n                                                outline: \"none\",}}}/>\n                                ))}\n                                {geographies.map(geo => {\n                                const centroid = geoCentroid(geo);\n                                const cur = allStates.find(s => s.val === geo.id);\n                                return (\n                                    <g key={geo.rsmKey + \"-name\"}>\n                                    {cur &&\n                                        centroid[0] > -160 &&\n                                        centroid[0] < -67 &&\n                                        (Object.keys(offsets).indexOf(cur.id) === -1 ? (\n                                        <Marker coordinates={centroid}>\n                                            <text y=\"3\" fontSize={12} textAnchor=\"middle\">{cur.id}</text>\n                                        </Marker>\n                                        ) : (\n                                        <Annotation subject={centroid} dx={offsets[cur.id][0]} dy={offsets[cur.id][1]}>\n                                            <text x={2} fontSize={12} alignmentBaseline=\"middle\">{cur.id}</text>\n                                        </Annotation>\n                                        ))}\n                                    </g>\n                                );\n                                })}\n                            </>\n                            )}\n                        </Geographies>\n                    </ComposableMap>\n                </div>\n                \n            { nationalData && \n            <div className=\"forecast\">\n                <LineChart width={600} height={400} data={nationalData} margin={{ top: 10, right: 40, bottom: 40, left: 5 }}>\n                    <Line type=\"monotone\" dataKey=\"US\" stroke=\"#043b4e\" strokeWidth={4} dot={false} />\n                    {/* <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" /> */}\n                    <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" vertical={false} />\n                    <XAxis dataKey=\"dates\" fontSize=\"10\" axisLine={false} tickLine={false} tickFormatter={formatXAxis} />\n                    <YAxis fontSize=\"10\" axisLine={false} tickLine={false} domain={[0, 200]}/>\n                    <ReferenceLine x=\"2020-01-25\" stroke=\"#EE3E23\" strokeDasharray=\"4 4\" label={{ position: \"bottom\", value: \"First case in US\", fontSize: \"12\", fill:\"#EE3E23\", offset: 20 }} />\n                    <ReferenceLine x=\"2020-03-14\" stroke=\"#4A72B7\" strokeDasharray=\"4 4\" label={{ position: 'insideTopLeft',  value: 'National emergency declare', fill: '#4A72B7', fontSize: \"12\" }} />\n                    <ReferenceLine x=\"2020-03-28\" stroke=\"#809f3d\" strokeDasharray=\"4 4\" label={{ position: \"bottom\", value: \"CARES act enacted\", fill: \"#809f3d\", offset: 30, fontSize: \"12\" }} />          \n                    <ReferenceLine x=\"2020-04-18\" stroke=\"#F48620\" strokeDasharray=\"4 4\" label={{ position: 'bottom', value: \"Stimulus payments starts\", fill: \"#F48620\", offset: 45, fontSize: \"12\" }} />\n                    <ReferenceLine x=\"2020-10-31\" stroke=\"#368243\" strokeDasharray=\"4 4\" label={{ position: \"bottom\", value: \"Election day\", fill: \"#368243\", offset: 20, fontSize: \"12\" }} />\n                    {/* <Tooltip formatter={value => new Intl.NumberFormat('en').format(Math.round(value))}/> */}\n                    <Tooltip formatter={ value => Math.round(value) }/>\n                </LineChart>\n            </div>\n            }\n            </div>\n        </div>\n    )\n}\n\nexport default National;","export default __webpack_public_path__ + \"static/media/JHU_CumulativeCases_State.7ca3e20a.csv\";","import React from \"react\";\n\nconst CustomChartTooltip = ({ active, payload }) => {\n    if (active) {\n        return (\n            <div className=\"custom-tooltip\">\n                <p className=\"tooltip-label\" style={{fontSize: \"18px\"}}>{`${Math.floor(payload[0].value)}`}</p>\n                <p className=\"tooltip-label\">{`new cases per 100K`}</p>\n            </div>\n        )\n    }\n    return null;\n}\n\nexport default CustomChartTooltip;","import React from \"react\";\n\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, ReferenceLine, ReferenceArea } from 'recharts';\nimport CustomChartTooltip from \"./CustomChartTooltip\";\n\nconst StatesChart = ( props ) => {\n    let { onStateId, allStatesData, yMax } = props;\n\n    let plotData = allStatesData.map(function(d) {\n        return { date: d.dates, cases: d[onStateId] };\n    })\n    \n    let yDomain = Math.ceil((yMax+yMax*0.5)/1000) * 1000;\n\n    return (\n        <div className=\"forecast\">\n            <LineChart width={600} height={400} data={plotData} margin={{ top: 10, right: 40, bottom: 40, left: 5 }}>\n                <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" vertical={false} />\n                <XAxis dataKey=\"date\" fontSize=\"10\" axisLine={false} tickLine={false}  />\n                <YAxis fontSize=\"10\" axisLine={false} tickLine={false} domain={[0, yDomain]} />\n                <ReferenceLine x=\"2020-01-25\" stroke=\"#EE3E23\" strokeDasharray=\"4 4\" label={{ position: \"bottom\", value: \"First case in US\", fontSize: \"12\", fill:\"#EE3E23\", offset: 20  }} />\n                <ReferenceLine x=\"2020-03-14\" stroke=\"#4A72B7\" strokeDasharray=\"4 4\" label={{ position: 'insideTopLeft',  value: 'National emergency declare', fill: '#4A72B7', fontSize: \"12\" }} />\n                <ReferenceLine x=\"2020-03-28\" stroke=\"#809f3d\" strokeDasharray=\"4 4\" label={{ position: \"bottom\", value: \"CARES act enacted\", fill: \"#809f3d\", offset: 30, fontSize: \"12\" }} />          \n                <ReferenceLine x=\"2020-04-18\" stroke=\"#F48620\" strokeDasharray=\"4 4\" label={{ position: 'bottom', value: \"Stimulus payments starts\", fill: \"#F48620\", offset: 45, fontSize: \"12\" }} />\n                <ReferenceLine x=\"2020-10-31\" stroke=\"#368243\" strokeDasharray=\"4 4\" label={{ position: \"bottom\", value: \"Election day\", fill: \"#368243\", offset: 20, fontSize: \"12\" }} />\n                <ReferenceArea x1=\"2020-10-31\" x2=\"2020-11-07\" y1={0} stroke=\"red\" strokeOpacity={0.3} label={{ value: \"Forecast\", fontSize: \"16\", position: \"insideTopRight\" }}/>\n                <Line type=\"monotone\" dataKey=\"cases\" stroke=\"#043b4e\" strokeWidth={4} dot={false} />\n                <Tooltip \n                    content={<CustomChartTooltip />}\n                />\n            </LineChart>\n        </div>\n\n    )\n}\n\nexport default StatesChart;","import React, { useState, useEffect } from \"react\";\nimport { ComposableMap, Geographies, Geography, Marker, Annotation } from \"react-simple-maps\"\nimport { geoCentroid } from \"d3-geo\";\nimport ReactTooltip from \"react-tooltip\";\n\nimport { csv } from \"d3-fetch\";\nimport csvState from \"../Data/State/JHU_CumulativeCases_State.csv\";\n// I updated the JHU_CumulativeCases by adding last row from the OQN_CumulativeCasesForecast!!\nimport allStates from \"../Maps/allstates.json\";\n\nimport { scaleQuantile } from \"d3-scale\";\nimport StatesChart from \"./StatesChart\";\n\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\n\nconst offsets = {\n    DC: [30, 25]\n};\n\nconst latestDate = 'October 31 2020';\n\nconst States = () => {\n\n    const [stateData, setStateData] = useState([]); // for mapping\n    const [onStateId, setOnStateId] = useState(\"53\"); // for initializing WA data\n    const [allStatesData, setAllStatesData] = useState([]); \n    const [stateCase, setStateCase] = useState(\"1411\"); // for WA cumulative case data\n    const [error, setError] = useState('');\n    const [tooltip, setTooltip] = useState('');\n    const [forecast, setForecast] = useState('');\n    const [yMax, setYMax] = useState(1412);\n\n\n    useEffect(() => {\n        let isSubscribed = true;\n        csv(csvState).then(state => {\n            if (isSubscribed) {\n                let st = state[state.length-2];\n                let converted = Object.keys(st).map(key => ({ key, cases: st[key]}))\n                let forecastSt = state[state.length-1];\n                let forecastCov = Object.keys(forecastSt).map(key => ({ key, cases: st[key]}));\n                setStateData(converted);\n                setAllStatesData(state);\n                setForecast(forecastCov);\n            } \n        })\n        .catch(error => (isSubscribed ? setError(error.toString()) : null));\n        return () => isSubscribed = false;\n    }, []);\n\n    const stateInfo = allStates.filter(d => d.val === onStateId).map(d => d.name);\n\n    const colorScale = scaleQuantile()\n        .domain(stateData.map(d => d.cases))\n        .range([\n            \"#ffedea\",\n            \"#ffcec5\",\n            \"#ffad9f\",\n            \"#ff8a75\",\n            \"#ff5533\",\n            \"#e2492d\",\n            \"#be3d26\",\n            \"#9a311f\",\n            \"#782618\"\n    ]);\n\n    // for mapping the current cases : fetch only the last element from the csv data and map\n    // for chart : filter out with the state fips id and plot\n    return (\n        <div>\n            <p style={{fontSize: \"20px\", fontWeight: \"300\"}}>In <code>{stateInfo}</code> state, on <code>{latestDate}</code>, there were <code>{Math.round(stateCase)}</code> reported COVID-19 cases per 100K people.</p>\n            <div className=\"vis-wrapper\">\n                    <div className=\"forecast usmap\" >\n                    <ComposableMap data-tip=\"\" projection=\"geoAlbersUsa\" \n                    projectionConfig={{ scale: 800 }} \n                    width={900}\n                    style={{ width: \"100%\", height: \"auto\" }}>\n                        <Geographies geography={geoUrl}>\n                            {({ geographies }) => (\n                            <>\n                                { geographies.map(geo => {\n                                    const cur = stateData.find(s => s.key === geo.id);\n                                    return (\n                                        <Geography\n                                        key={geo.rsmKey}\n                                        geography={geo}\n                                        fill={cur ? colorScale(cur.cases) : \"#EEE\"}\n                                        stroke=\"#fff\"\n                                        style={{\n                                            hover: {\n                                                stroke: \"#782618\",\n                                                strokeWidth: 2, \n                                            }\n                                        }}\n                                        onClick={() => {\n                                            setOnStateId(cur.key);\n                                            setStateCase(cur.cases);\n                                            setYMax(Math.round(cur.cases));\n                                        }}\n                                        onMouseEnter={() => {\n                                            setTooltip(`${geo.properties.name}: ${Math.round(cur.cases)}`);\n                                        }}\n                                        onMouseLeave={() => {\n                                            setTooltip(\"\");\n                                        }}\n                                    />                                    \n                                    );\n                                })}\n                                {geographies.map(geo => {\n                                const centroid = geoCentroid(geo);\n                                const cur = allStates.find(s => s.val === geo.id);\n                                return (\n                                    <g key={geo.rsmKey + \"-name\"}>\n                                    {cur &&\n                                        centroid[0] > -160 &&\n                                        centroid[0] < -67 &&\n                                        (Object.keys(offsets).indexOf(cur.id) === -1 ? (\n                                        <Marker coordinates={centroid}>\n                                            <text y=\"3\" fontSize={12} textAnchor=\"middle\">{cur.id}</text>\n                                        </Marker>\n                                        ) : (\n                                        <Annotation subject={centroid} dx={offsets[cur.id][0]} dy={offsets[cur.id][1]}>\n                                            <text x={2} fontSize={12} alignmentBaseline=\"middle\">{cur.id}</text>\n                                        </Annotation>\n                                        ))}\n                                    </g>\n                                );\n                                })}\n                            </>\n                            )}\n                        </Geographies>\n                    </ComposableMap>\n                    <ReactTooltip backgroundColor=\"#b3b3b3\" textColor=\"#1a1a1a\">{tooltip}</ReactTooltip>\n                </div>\n            {allStatesData && <StatesChart yMax={yMax} onStateId={onStateId} allStatesData={allStatesData} stateCase={stateCase}/> }\n            </div>\n            </div>\n            \n    )\n}\n\nexport default States;","export default __webpack_public_path__ + \"static/media/JHU_CumulativeCases_County.b8292766.csv\";","export default __webpack_public_path__ + \"static/media/locations_information.63e7395a.csv\";","import React from \"react\";\n\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, ReferenceLine } from 'recharts';\n\nconst CountyChart = ( props ) => {\n    let { onCountyId, allCountiesData } = props;\n\n    let plotData = allCountiesData.map(function(d) {\n        return { date: d.dates, cases: d[onCountyId] };\n    })\n    \n    return (\n        <div className=\"forecast\">\n            <LineChart width={600} height={400} data={plotData} margin={{ top: 10, right: 40, bottom: 40, left: 5 }}>\n                <Line type=\"monotone\" dataKey=\"cases\" stroke=\"#043b4e\" strokeWidth={4} dot={false} />\n                <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" vertical={false} />\n                <XAxis dataKey=\"date\" fontSize=\"10\" axisLine={false} tickLine={false}  />\n                <YAxis fontSize=\"10\" axisLine={false} tickLine={false} domain={[0, 4000]}/>\n                <ReferenceLine x=\"2020-01-25\" stroke=\"#EE3E23\" strokeDasharray=\"4 4\" label={{ position: \"bottom\", value: \"First case in US\", fontSize: \"12\", fill:\"#EE3E23\", offset: \"20\"  }} />\n                <ReferenceLine x=\"2020-03-14\" stroke=\"#4A72B7\" strokeDasharray=\"4 4\" label={{ position: 'insideTopLeft',  value: 'National emergency declare', fill: '#4A72B7', fontSize: \"12\" }} />\n                <ReferenceLine x=\"2020-03-28\" stroke=\"#809f3d\" strokeDasharray=\"4 4\" label={{ position: \"bottom\", value: \"CARES act enacted\", fill: \"#809f3d\", offset: \"30\", fontSize: \"12\" }} />          \n                <ReferenceLine x=\"2020-04-18\" stroke=\"#F48620\" strokeDasharray=\"4 4\" label={{ position: 'bottom', value: \"Stimulus payments starts\", fill: \"#F48620\", offset: \"45\", fontSize: \"12\" }} />\n                <ReferenceLine x=\"2020-10-31\" stroke=\"#368243\" strokeDasharray=\"4 4\" label={{ position: \"bottom\", value: \"Election day\", fill: \"#368243\", offset: \"20\", fontSize: \"12\" }} />\n                <Tooltip formatter={value => new Intl.NumberFormat('en').format(Math.round(value))}/>\n            </LineChart>\n        </div>\n\n    )\n}\n\nexport default CountyChart;","import React, { useState, useEffect } from \"react\";\nimport { ComposableMap, Geographies, Geography, Marker, Annotation } from \"react-simple-maps\"\n\nimport { csv } from \"d3-fetch\";\nimport csvCounty from \"../Data/County/JHU_CumulativeCases_County.csv\";\nimport csvLocation from \"../Data/locations_information.csv\";\nimport { scaleQuantile } from \"d3-scale\";\nimport CountyChart from \"./CountyChart\";\nimport ReactTooltip from \"react-tooltip\";\n\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/counties-10m.json\";\nconst latestDate = 'October 31 2020';\n\n// const location = csv(csvLocation).then(loc => {\n//     let countyLoc = loc.filter(d => d.type === \"county\");\n    \n// })\nconst Counties = () => {\n\n    const [countyData, setCountyData] = useState([]); // for mapping\n    const [onCountyId, setOnCountyId] = useState(\"53033\"); // initialize king county data\n    const [allCountiesData, setAllCountiesData] = useState([]);\n    const [countyCase, setCountyCase] = useState(\"1231\");\n    const [countyLocation, setCountyLocation] = useState([]); \n    const [tooltip, setTooltip] = useState('');\n\n    useEffect(() => {\n        csv(csvCounty).then(county => {\n            let co = county[county.length-1];\n            let converted = Object.keys(co).map(key => ({ key, cases: co[key]}));\n            setCountyData(converted);\n            // console.log(countyData) -- {key: \"10001\", cases: \"1974.1572909406702\"}\n            setAllCountiesData(county);\n        })\n    }, []);\n\n    useEffect(() => {\n        csv(csvLocation).then(loc => {\n            setCountyLocation(loc.filter(d => d.type === \"county\"));\n        })\n    }, []);\n\n    let countyName = countyLocation.filter(d => d.fips === onCountyId).map(d => `${d.name} in ${d.state}`);\n\n    const colorScale = scaleQuantile()\n        .domain(countyData.map(d => d.cases))\n        .range([\n            \"#ffedea\",\n            \"#ffcec5\",\n            \"#ffad9f\",\n            \"#ff8a75\",\n            \"#ff5533\",\n            \"#e2492d\",\n            \"#be3d26\",\n            \"#9a311f\",\n            \"#782618\"\n        ]);\n\n    return (\n        <div>\n            <p style={{fontSize: \"20px\", fontWeight: \"300\"}}>In the <code>{countyName}</code>, on <code>{latestDate}</code>, there were <code>{Math.round(countyCase)}</code> reported COVID-19 cases per 100K people.</p>\n            <div className=\"vis-wrapper\">\n                <div className=\"forecast usmap\" >\n                    <ComposableMap data-tip=\"\" projection=\"geoAlbersUsa\" projectionConfig={{ scale: 800 }} \n                            width={900} style={{ width: \"100%\", height: \"auto\" }}>\n                        <Geographies geography={geoUrl}>\n                            {({ geographies }) =>\n                            geographies.map(geo => {\n                                const cur = countyData.find(s => s.key === geo.id);\n                                return (\n                                <Geography\n                                    key={geo.rsmKey}\n                                    geography={geo}\n                                    fill={cur ? colorScale(cur.cases) : \"#EEE\"}\n                                    onClick={() => {\n                                        console.log(cur.key, cur.cases);\n                                        setOnCountyId(cur.key);\n                                        setCountyCase(cur.cases);\n                                    }}\n                                    onMouseEnter={() => {\n                                        setTooltip(`${geo.properties.name} county : ${Math.round(cur.cases)}`);\n                                    }}\n                                    onMouseLeave={() => {\n                                        setTooltip(\"\");\n                                    }}\n                                />\n                                );\n                            })\n                            }\n                        </Geographies>\n                    </ComposableMap>\n                    <ReactTooltip backgroundColor=\"#b3b3b3\" textColor=\"#1a1a1a\">{tooltip}</ReactTooltip>\n                </div>\n            {allCountiesData && <CountyChart onCountyId={onCountyId} allCountiesData={allCountiesData} /> }\n        </div>\n    </div>\n    )\n}\n\nexport default Counties;","import React, { useState } from \"react\";\nimport National from \"../Components/National\";\nimport States from \"./States\";\nimport Counties from \"./Counties\";\n\nconst Forecast = () => {\n\n    const [isNational, setIsNationl] = useState(true);\n    const [isState, setIsState] = useState(false);\n    const [isCounty, setIsCounty] = useState(false);\n\n    return (\n        <div className=\"container\">\n            <div className=\"options\">\n                <p className=\"option-button\" style={{cursor: \"default\"}}>Choose your view:</p>\n                <p className={isNational ? \"selected\" : \"option-button\"}\n                    onClick={()=>{\n                    setIsNationl(true)\n                    setIsState(false)\n                    setIsCounty(false)} }>National</p>\n                <p className={isState ? \"selected\" : \"option-button\"}\n                    onClick={()=> {\n                    setIsNationl(false);\n                    setIsState(true)\n                    setIsCounty(false)}} >States</p>\n                <p className={isCounty ? \"selected\" : \"option-button\"}\n                    onClick={()=> {\n                    setIsNationl(false);\n                    setIsState(false)\n                    setIsCounty(true)}} >Counties</p>\n            </div>\n            <div>\n                <h3 style={{ fontSize: \"25px\", fontWeight: \"300\"}}>Daily reported COVID-19 new cases per 100,000 people in US</h3>\n                {\n                    isNational ? <National /> : isState ? <States /> : <Counties />\n                }\n\n            </div>\n\n        </div>\n    )\n}\n\nexport default Forecast;","import React from 'react';\n\nconst Model = () => {\n    return (\n        <div className=\"container\">\n            <h1>Our Covid-19 Forecast Model</h1>\n            <div style={{ textAlign: \"left\", maxWidth: \"800px\", margin: \"0 auto\"}}>\n                <h2 className=\"profile-name\">Introduction</h2>\n                <p className=\"text-height\">Our ability to contain the coronavirus pandemic depends on being able to forecast potential outbreaks and on understanding its driving forces.</p>\n                <p className=\"text-height\">In this work, we develop scientifically-driven machine learning models to accurately predict the spread of Covid-19 infections using real-time data. </p>\n                <p className=\"text-height\"><a href=\"https://c3.ai/customers/covid-19-data-lake/\" className=\"c3-ai-link\">C3 AI Covid-19 Data Lake </a>collects and organizes various data sets that may bear on the spread of Covid-19 -- daily case reports, movement trends, weather reports, and economic changes. Our models use this data to make predictions about future increases in Covid-19 cases at the county, state, and national levels in the United States.</p>\n                <h2 className=\"profile-name\" style={{marginTop: \"50px\"}}>Problem Description</h2>\n                <p className=\"text-height\">As coronavirus cases surge across the country, epidemiology and data science communities have come together to generate more accurate forecasts. Accurate forecasts help government and public health officials prevent and control coronavirus outbreaks.</p>\n                <p className=\"text-height\"><a href=\"https://www.cdc.gov/coronavirus/2019-ncov/covid-data/mathematical-modeling.html\" className=\"c3-ai-link\">The official CDC Covid-19 forecast </a>uses an ensemble of models to predict the number of new cases that are likely to arise in different geographic locations. The CDC Covid-19 forecast currently predicts national, state, and county numbers of new Covid-19 cases per week for the next 4 weeks using forecasts from 21 modeling groups. To aid this effort, we develop and operationalize an accurate Covid-19 forecast using the available data from the C3 AI Covid-19 Data Lake.</p>\n                <h2 className=\"profile-name\" style={{marginTop: \"50px\"}}>Broad Approach</h2>\n                <p className=\"text-height\">Coronavirus is thought to spread from person to person. A typical case starts with a person coming into contact with a patient, who may not have symptoms. The virus has a chance to spread to the person during each contact. When the virus is successful, the person becomes infected and infectious to other people. The virus spreads exponentially in this way.</p>\n                <p className=\"text-height\">Epidemiological models use the structural knowledge of the spread of the virus to make predictions using the number of infected individuals and the number of transmittive contact. But it is difficult to measure how many infected individuals there really are and with whom they had close contact. Instead, we only have some imperfect measurements of a set of inputs that may have bearing on these components. On the other hand, it has also been difficult to apply machine learning models because we have limited historical data marred by structural changes from policy decisions and changes in public behavior.</p>\n                <p className=\"text-height\">In order to learn the useful relations between variables in a data efficient manner, we develop a methodology that augments scientific models with machine-learnable structures. Our models use temporal and spatial features of the daily case reports and movement trends data to accurately predict future Covid-19 cases. Our forecast based on these models achieves state-of-the-art accuracies.\n</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Model;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport './App.css';\n\nimport Nav from './Components/Nav';\nimport Footer from './Components/Footer';\n\nimport About from './Components/About';\nimport PageNotFound from './Components/PageNotFound';\nimport C3 from './Components/C3';\n\nimport Forecast from './Components/Forecast';\nimport Model from './Components/Model';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Switch>\n        <Route exact path=\"/\" component={Forecast} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/docs\" component={Model} />\n        <Route path=\"/c3-ai-challenge\" component={C3} />\n        <Route path=\"/forecast\" component={Forecast} />\n        <Route component={PageNotFound} />\n      </Switch>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}